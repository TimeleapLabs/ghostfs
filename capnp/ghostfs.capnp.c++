// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ghostfs.capnp

#include "ghostfs.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<29> b_b7e9256c41304f3c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,  79,  48,  65, 108,  37, 233, 183,
     14,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  65, 117, 116,
    104,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,  75,  70, 189, 131, 227,   7, 158,
     70, 205, 208, 140,  32, 141, 241, 198,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     97, 117, 116, 104,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b7e9256c41304f3c = b_b7e9256c41304f3c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b7e9256c41304f3c[] = {
  &s_9e07e383bd464b04,
  &s_c6f18d208cd0cd46,
};
static const uint16_t m_b7e9256c41304f3c[] = {0};
const ::capnp::_::RawSchema s_b7e9256c41304f3c = {
  0xb7e9256c41304f3c, b_b7e9256c41304f3c.words, 29, d_b7e9256c41304f3c, m_b7e9256c41304f3c,
  2, 1, nullptr, nullptr, nullptr, { &s_b7e9256c41304f3c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_9e07e383bd464b04 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4,  75,  70, 189, 131, 227,   7, 158,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  65, 117, 116,
    104,  46,  97, 117, 116, 104,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e07e383bd464b04 = b_9e07e383bd464b04.words;
#if !CAPNP_LITE
static const uint16_t m_9e07e383bd464b04[] = {1, 0};
static const uint16_t i_9e07e383bd464b04[] = {0, 1};
const ::capnp::_::RawSchema s_9e07e383bd464b04 = {
  0x9e07e383bd464b04, b_9e07e383bd464b04.words, 48, nullptr, m_9e07e383bd464b04,
  0, 2, i_9e07e383bd464b04, nullptr, nullptr, { &s_9e07e383bd464b04, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_c6f18d208cd0cd46 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70, 205, 208, 140,  32, 141, 241, 198,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  65, 117, 116,
    104,  46,  97, 117, 116, 104,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    103, 104, 111, 115, 116,  70, 115,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    201,  77,  41,  92, 137, 215, 198, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6f18d208cd0cd46 = b_c6f18d208cd0cd46.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6f18d208cd0cd46[] = {
  &s_9fc6d7895c294dc9,
};
static const uint16_t m_c6f18d208cd0cd46[] = {0};
static const uint16_t i_c6f18d208cd0cd46[] = {0};
const ::capnp::_::RawSchema s_c6f18d208cd0cd46 = {
  0xc6f18d208cd0cd46, b_c6f18d208cd0cd46.words, 33, d_c6f18d208cd0cd46, m_c6f18d208cd0cd46,
  1, 1, i_c6f18d208cd0cd46, nullptr, nullptr, { &s_c6f18d208cd0cd46, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<108> b_9fc6d7895c294dc9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  77,  41,  92, 137, 215, 198, 159,
     14,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   2,   0,   0,
    129,   1,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     36,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
    233, 109,  45, 163, 132,  22,  80, 168,
     17,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     54,  67, 132,  84,  15, 254,  32, 187,
    217, 176,  59, 205,  40,  91, 243, 132,
    249,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    127, 230, 115, 117, 215, 142,  85, 255,
    133,  86,  41, 154, 145,  11, 227, 227,
    225,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     61,  92, 234, 207,  95, 102,  54, 234,
    245, 152,  45, 230,  40,  14, 236, 219,
    201,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    204,  46, 203, 253, 252, 133,   7, 208,
     99, 193, 162,  74, 155, 244, 125, 231,
    177,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     72,  49, 149, 238,  54, 206,  26, 149,
     34,  31, 173, 253,  49, 187,  31, 227,
    153,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    109, 179, 114,  37, 122, 176, 224, 205,
    111,  81, 180, 155,  59, 233,   9, 192,
    129,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     43, 248, 226, 219, 222, 233, 244, 237,
     18,  70,   7, 126, 240, 161, 143, 222,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     15,  32,  87,  92, 134, 159, 144, 234,
    128, 234, 151, 126,  87, 105, 151, 164,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
    108, 111, 111, 107, 117, 112,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  97, 116, 116, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  97, 116, 116, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 107, 110, 111, 100,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 107, 100, 105, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110, 108, 105, 110, 107,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9fc6d7895c294dc9 = b_9fc6d7895c294dc9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9fc6d7895c294dc9[] = {
  &s_84f35b28cd3bb0d9,
  &s_951ace36ee953148,
  &s_a49769577e97ea80,
  &s_a8501684a32d6de9,
  &s_b0836f411d2abe3b,
  &s_bb20fe0f54844336,
  &s_c009e93b9bb4516f,
  &s_cde0b07a2572b36d,
  &s_d00785fcfdcb2ecc,
  &s_dbec0e28e62d98f5,
  &s_de8fa1f07e074612,
  &s_e31fbb31fdad1f22,
  &s_e3e30b919a295685,
  &s_e77df49b4aa2c163,
  &s_ea36665fcfea5c3d,
  &s_ea909f865c57200f,
  &s_edf4e9dedbe2f82b,
  &s_ff558ed77573e67f,
};
static const uint16_t m_9fc6d7895c294dc9[] = {8, 1, 0, 4, 3, 6, 2, 5, 7};
const ::capnp::_::RawSchema s_9fc6d7895c294dc9 = {
  0x9fc6d7895c294dc9, b_9fc6d7895c294dc9.words, 108, d_9fc6d7895c294dc9, m_9fc6d7895c294dc9,
  18, 9, nullptr, nullptr, nullptr, { &s_9fc6d7895c294dc9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_b0836f411d2abe3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 108, 111,
    111, 107, 117, 112,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    209, 215,  34, 203, 162,  51, 177, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0836f411d2abe3b = b_b0836f411d2abe3b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0836f411d2abe3b[] = {
  &s_99b133a2cb22d7d1,
};
static const uint16_t m_b0836f411d2abe3b[] = {0};
static const uint16_t i_b0836f411d2abe3b[] = {0};
const ::capnp::_::RawSchema s_b0836f411d2abe3b = {
  0xb0836f411d2abe3b, b_b0836f411d2abe3b.words, 33, d_b0836f411d2abe3b, m_b0836f411d2abe3b,
  1, 1, i_b0836f411d2abe3b, nullptr, nullptr, { &s_b0836f411d2abe3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a8501684a32d6de9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 109,  45, 163, 132,  22,  80, 168,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 108, 111,
    111, 107, 117, 112,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     18, 114, 255, 105,  52,  23, 103, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8501684a32d6de9 = b_a8501684a32d6de9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8501684a32d6de9[] = {
  &s_a367173469ff7212,
};
static const uint16_t m_a8501684a32d6de9[] = {0};
static const uint16_t i_a8501684a32d6de9[] = {0};
const ::capnp::_::RawSchema s_a8501684a32d6de9 = {
  0xa8501684a32d6de9, b_a8501684a32d6de9.words, 33, d_a8501684a32d6de9, m_a8501684a32d6de9,
  1, 1, i_a8501684a32d6de9, nullptr, nullptr, { &s_a8501684a32d6de9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_bb20fe0f54844336 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54,  67, 132,  84,  15, 254,  32, 187,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 103, 101,
    116,  97, 116, 116, 114,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     32,  68, 216, 177, 242, 252, 204, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb20fe0f54844336 = b_bb20fe0f54844336.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb20fe0f54844336[] = {
  &s_f9ccfcf2b1d84420,
};
static const uint16_t m_bb20fe0f54844336[] = {0};
static const uint16_t i_bb20fe0f54844336[] = {0};
const ::capnp::_::RawSchema s_bb20fe0f54844336 = {
  0xbb20fe0f54844336, b_bb20fe0f54844336.words, 33, d_bb20fe0f54844336, m_bb20fe0f54844336,
  1, 1, i_bb20fe0f54844336, nullptr, nullptr, { &s_bb20fe0f54844336, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_84f35b28cd3bb0d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217, 176,  59, 205,  40,  91, 243, 132,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 103, 101,
    116,  97, 116, 116, 114,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     22,  43, 192, 114, 176,  26, 130, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84f35b28cd3bb0d9 = b_84f35b28cd3bb0d9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_84f35b28cd3bb0d9[] = {
  &s_dd821ab072c02b16,
};
static const uint16_t m_84f35b28cd3bb0d9[] = {0};
static const uint16_t i_84f35b28cd3bb0d9[] = {0};
const ::capnp::_::RawSchema s_84f35b28cd3bb0d9 = {
  0x84f35b28cd3bb0d9, b_84f35b28cd3bb0d9.words, 33, d_84f35b28cd3bb0d9, m_84f35b28cd3bb0d9,
  1, 1, i_84f35b28cd3bb0d9, nullptr, nullptr, { &s_84f35b28cd3bb0d9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ff558ed77573e67f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 230, 115, 117, 215, 142,  85, 255,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 115, 101,
    116,  97, 116, 116, 114,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    115, 246, 117,  96,   2, 230,  76, 184,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff558ed77573e67f = b_ff558ed77573e67f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff558ed77573e67f[] = {
  &s_b84ce6026075f673,
};
static const uint16_t m_ff558ed77573e67f[] = {0};
static const uint16_t i_ff558ed77573e67f[] = {0};
const ::capnp::_::RawSchema s_ff558ed77573e67f = {
  0xff558ed77573e67f, b_ff558ed77573e67f.words, 33, d_ff558ed77573e67f, m_ff558ed77573e67f,
  1, 1, i_ff558ed77573e67f, nullptr, nullptr, { &s_ff558ed77573e67f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e3e30b919a295685 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133,  86,  41, 154, 145,  11, 227, 227,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 115, 101,
    116,  97, 116, 116, 114,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    244,  54, 217, 217, 168, 195,  69, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3e30b919a295685 = b_e3e30b919a295685.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e3e30b919a295685[] = {
  &s_b645c3a8d9d936f4,
};
static const uint16_t m_e3e30b919a295685[] = {0};
static const uint16_t i_e3e30b919a295685[] = {0};
const ::capnp::_::RawSchema s_e3e30b919a295685 = {
  0xe3e30b919a295685, b_e3e30b919a295685.words, 33, d_e3e30b919a295685, m_e3e30b919a295685,
  1, 1, i_e3e30b919a295685, nullptr, nullptr, { &s_e3e30b919a295685, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ea36665fcfea5c3d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     61,  92, 234, 207,  95, 102,  54, 234,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 109, 107,
    110, 111, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     97, 126, 201, 221, 129,  12,   0, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea36665fcfea5c3d = b_ea36665fcfea5c3d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea36665fcfea5c3d[] = {
  &s_a0000c81ddc97e61,
};
static const uint16_t m_ea36665fcfea5c3d[] = {0};
static const uint16_t i_ea36665fcfea5c3d[] = {0};
const ::capnp::_::RawSchema s_ea36665fcfea5c3d = {
  0xea36665fcfea5c3d, b_ea36665fcfea5c3d.words, 33, d_ea36665fcfea5c3d, m_ea36665fcfea5c3d,
  1, 1, i_ea36665fcfea5c3d, nullptr, nullptr, { &s_ea36665fcfea5c3d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_dbec0e28e62d98f5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    245, 152,  45, 230,  40,  14, 236, 219,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 109, 107,
    110, 111, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    205,  14,  89, 171,  72,   7, 168, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbec0e28e62d98f5 = b_dbec0e28e62d98f5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dbec0e28e62d98f5[] = {
  &s_8ea80748ab590ecd,
};
static const uint16_t m_dbec0e28e62d98f5[] = {0};
static const uint16_t i_dbec0e28e62d98f5[] = {0};
const ::capnp::_::RawSchema s_dbec0e28e62d98f5 = {
  0xdbec0e28e62d98f5, b_dbec0e28e62d98f5.words, 33, d_dbec0e28e62d98f5, m_dbec0e28e62d98f5,
  1, 1, i_dbec0e28e62d98f5, nullptr, nullptr, { &s_dbec0e28e62d98f5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d00785fcfdcb2ecc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  46, 203, 253, 252, 133,   7, 208,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 109, 107,
    100, 105, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     28,  23, 132,  44, 136, 138, 133, 224,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d00785fcfdcb2ecc = b_d00785fcfdcb2ecc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d00785fcfdcb2ecc[] = {
  &s_e0858a882c84171c,
};
static const uint16_t m_d00785fcfdcb2ecc[] = {0};
static const uint16_t i_d00785fcfdcb2ecc[] = {0};
const ::capnp::_::RawSchema s_d00785fcfdcb2ecc = {
  0xd00785fcfdcb2ecc, b_d00785fcfdcb2ecc.words, 33, d_d00785fcfdcb2ecc, m_d00785fcfdcb2ecc,
  1, 1, i_d00785fcfdcb2ecc, nullptr, nullptr, { &s_d00785fcfdcb2ecc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e77df49b4aa2c163 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     99, 193, 162,  74, 155, 244, 125, 231,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 109, 107,
    100, 105, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 165,  48, 137,  33,  26, 246, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e77df49b4aa2c163 = b_e77df49b4aa2c163.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e77df49b4aa2c163[] = {
  &s_f7f61a218930a5e0,
};
static const uint16_t m_e77df49b4aa2c163[] = {0};
static const uint16_t i_e77df49b4aa2c163[] = {0};
const ::capnp::_::RawSchema s_e77df49b4aa2c163 = {
  0xe77df49b4aa2c163, b_e77df49b4aa2c163.words, 33, d_e77df49b4aa2c163, m_e77df49b4aa2c163,
  1, 1, i_e77df49b4aa2c163, nullptr, nullptr, { &s_e77df49b4aa2c163, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_951ace36ee953148 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72,  49, 149, 238,  54, 206,  26, 149,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 117, 110,
    108, 105, 110, 107,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    130, 245,  15, 215, 100,  94,  99, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_951ace36ee953148 = b_951ace36ee953148.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_951ace36ee953148[] = {
  &s_9f635e64d70ff582,
};
static const uint16_t m_951ace36ee953148[] = {0};
static const uint16_t i_951ace36ee953148[] = {0};
const ::capnp::_::RawSchema s_951ace36ee953148 = {
  0x951ace36ee953148, b_951ace36ee953148.words, 33, d_951ace36ee953148, m_951ace36ee953148,
  1, 1, i_951ace36ee953148, nullptr, nullptr, { &s_951ace36ee953148, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e31fbb31fdad1f22 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  31, 173, 253,  49, 187,  31, 227,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 117, 110,
    108, 105, 110, 107,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     85, 197,  29, 120,  61,  11,  86, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e31fbb31fdad1f22 = b_e31fbb31fdad1f22.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e31fbb31fdad1f22[] = {
  &s_cf560b3d781dc555,
};
static const uint16_t m_e31fbb31fdad1f22[] = {0};
static const uint16_t i_e31fbb31fdad1f22[] = {0};
const ::capnp::_::RawSchema s_e31fbb31fdad1f22 = {
  0xe31fbb31fdad1f22, b_e31fbb31fdad1f22.words, 33, d_e31fbb31fdad1f22, m_e31fbb31fdad1f22,
  1, 1, i_e31fbb31fdad1f22, nullptr, nullptr, { &s_e31fbb31fdad1f22, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_cde0b07a2572b36d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109, 179, 114,  37, 122, 176, 224, 205,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 114, 101,
     97, 100,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    157, 176, 155,  49,  28, 218, 108, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cde0b07a2572b36d = b_cde0b07a2572b36d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cde0b07a2572b36d[] = {
  &s_9c6cda1c319bb09d,
};
static const uint16_t m_cde0b07a2572b36d[] = {0};
static const uint16_t i_cde0b07a2572b36d[] = {0};
const ::capnp::_::RawSchema s_cde0b07a2572b36d = {
  0xcde0b07a2572b36d, b_cde0b07a2572b36d.words, 33, d_cde0b07a2572b36d, m_cde0b07a2572b36d,
  1, 1, i_cde0b07a2572b36d, nullptr, nullptr, { &s_cde0b07a2572b36d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_c009e93b9bb4516f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111,  81, 180, 155,  59, 233,   9, 192,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 114, 101,
     97, 100,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 120,   8, 142,  68, 101, 173, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c009e93b9bb4516f = b_c009e93b9bb4516f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c009e93b9bb4516f[] = {
  &s_99ad65448e087865,
};
static const uint16_t m_c009e93b9bb4516f[] = {0};
static const uint16_t i_c009e93b9bb4516f[] = {0};
const ::capnp::_::RawSchema s_c009e93b9bb4516f = {
  0xc009e93b9bb4516f, b_c009e93b9bb4516f.words, 33, d_c009e93b9bb4516f, m_c009e93b9bb4516f,
  1, 1, i_c009e93b9bb4516f, nullptr, nullptr, { &s_c009e93b9bb4516f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_edf4e9dedbe2f82b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43, 248, 226, 219, 222, 233, 244, 237,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 119, 114,
    105, 116, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 117,  12, 146, 248, 131,  24, 147,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edf4e9dedbe2f82b = b_edf4e9dedbe2f82b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edf4e9dedbe2f82b[] = {
  &s_931883f8920c7515,
};
static const uint16_t m_edf4e9dedbe2f82b[] = {0};
static const uint16_t i_edf4e9dedbe2f82b[] = {0};
const ::capnp::_::RawSchema s_edf4e9dedbe2f82b = {
  0xedf4e9dedbe2f82b, b_edf4e9dedbe2f82b.words, 33, d_edf4e9dedbe2f82b, m_edf4e9dedbe2f82b,
  1, 1, i_edf4e9dedbe2f82b, nullptr, nullptr, { &s_edf4e9dedbe2f82b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_de8fa1f07e074612 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18,  70,   7, 126, 240, 161, 143, 222,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46, 119, 114,
    105, 116, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     36,  86, 228, 109, 250,   9, 121, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_de8fa1f07e074612 = b_de8fa1f07e074612.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_de8fa1f07e074612[] = {
  &s_ec7909fa6de45624,
};
static const uint16_t m_de8fa1f07e074612[] = {0};
static const uint16_t i_de8fa1f07e074612[] = {0};
const ::capnp::_::RawSchema s_de8fa1f07e074612 = {
  0xde8fa1f07e074612, b_de8fa1f07e074612.words, 33, d_de8fa1f07e074612, m_de8fa1f07e074612,
  1, 1, i_de8fa1f07e074612, nullptr, nullptr, { &s_de8fa1f07e074612, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ea909f865c57200f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15,  32,  87,  92, 134, 159, 144, 234,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46,  99, 114,
    101,  97, 116, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     91, 163, 202,  97, 117,  12, 202, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea909f865c57200f = b_ea909f865c57200f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea909f865c57200f[] = {
  &s_dcca0c7561caa35b,
};
static const uint16_t m_ea909f865c57200f[] = {0};
static const uint16_t i_ea909f865c57200f[] = {0};
const ::capnp::_::RawSchema s_ea909f865c57200f = {
  0xea909f865c57200f, b_ea909f865c57200f.words, 33, d_ea909f865c57200f, m_ea909f865c57200f,
  1, 1, i_ea909f865c57200f, nullptr, nullptr, { &s_ea909f865c57200f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a49769577e97ea80 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    128, 234, 151, 126,  87, 105, 151, 164,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 104, 111, 115, 116, 102, 115,  46,
     99,  97, 112, 110, 112,  58,  71, 104,
    111, 115, 116,  70,  83,  46,  99, 114,
    101,  97, 116, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     63,  99, 235, 204, 196, 200, 204, 130,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a49769577e97ea80 = b_a49769577e97ea80.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a49769577e97ea80[] = {
  &s_82ccc8c4cceb633f,
};
static const uint16_t m_a49769577e97ea80[] = {0};
static const uint16_t i_a49769577e97ea80[] = {0};
const ::capnp::_::RawSchema s_a49769577e97ea80 = {
  0xa49769577e97ea80, b_a49769577e97ea80.words, 33, d_a49769577e97ea80, m_a49769577e97ea80,
  1, 1, i_a49769577e97ea80, nullptr, nullptr, { &s_a49769577e97ea80, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>
GhostFSAuth::Client::authRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>(
      0xb7e9256c41304f3cull, 0, sizeHint);
}
::kj::Promise<void> GhostFSAuth::Server::auth(AuthContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFSAuth", "auth",
      0xb7e9256c41304f3cull, 0);
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuth::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb7e9256c41304f3cull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ghostfs.capnp:GhostFSAuth", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuth::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        auth(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ghostfs.capnp:GhostFSAuth",
          0xb7e9256c41304f3cull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFSAuth
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuth::AuthParams
constexpr uint16_t GhostFSAuth::AuthParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuth::AuthParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::AuthParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::AuthParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuth::AuthResults
constexpr uint16_t GhostFSAuth::AuthResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuth::AuthResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::AuthResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::AuthResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::GhostFS::LookupParams,  ::GhostFS::LookupResults>
GhostFS::Client::lookupRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::LookupParams,  ::GhostFS::LookupResults>(
      0x9fc6d7895c294dc9ull, 0, sizeHint);
}
::kj::Promise<void> GhostFS::Server::lookup(LookupContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "lookup",
      0x9fc6d7895c294dc9ull, 0);
}
::capnp::Request< ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>
GhostFS::Client::getattrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>(
      0x9fc6d7895c294dc9ull, 1, sizeHint);
}
::kj::Promise<void> GhostFS::Server::getattr(GetattrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "getattr",
      0x9fc6d7895c294dc9ull, 1);
}
::capnp::Request< ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>
GhostFS::Client::setattrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>(
      0x9fc6d7895c294dc9ull, 2, sizeHint);
}
::kj::Promise<void> GhostFS::Server::setattr(SetattrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "setattr",
      0x9fc6d7895c294dc9ull, 2);
}
::capnp::Request< ::GhostFS::MknodParams,  ::GhostFS::MknodResults>
GhostFS::Client::mknodRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::MknodParams,  ::GhostFS::MknodResults>(
      0x9fc6d7895c294dc9ull, 3, sizeHint);
}
::kj::Promise<void> GhostFS::Server::mknod(MknodContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "mknod",
      0x9fc6d7895c294dc9ull, 3);
}
::capnp::Request< ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>
GhostFS::Client::mkdirRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>(
      0x9fc6d7895c294dc9ull, 4, sizeHint);
}
::kj::Promise<void> GhostFS::Server::mkdir(MkdirContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "mkdir",
      0x9fc6d7895c294dc9ull, 4);
}
::capnp::Request< ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>
GhostFS::Client::unlinkRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>(
      0x9fc6d7895c294dc9ull, 5, sizeHint);
}
::kj::Promise<void> GhostFS::Server::unlink(UnlinkContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "unlink",
      0x9fc6d7895c294dc9ull, 5);
}
::capnp::Request< ::GhostFS::ReadParams,  ::GhostFS::ReadResults>
GhostFS::Client::readRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::ReadParams,  ::GhostFS::ReadResults>(
      0x9fc6d7895c294dc9ull, 6, sizeHint);
}
::kj::Promise<void> GhostFS::Server::read(ReadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "read",
      0x9fc6d7895c294dc9ull, 6);
}
::capnp::Request< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>
GhostFS::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(
      0x9fc6d7895c294dc9ull, 7, sizeHint);
}
::kj::Promise<void> GhostFS::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "write",
      0x9fc6d7895c294dc9ull, 7);
}
::capnp::Request< ::GhostFS::CreateParams,  ::GhostFS::CreateResults>
GhostFS::Client::createRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::CreateParams,  ::GhostFS::CreateResults>(
      0x9fc6d7895c294dc9ull, 8, sizeHint);
}
::kj::Promise<void> GhostFS::Server::create(CreateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "ghostfs.capnp:GhostFS", "create",
      0x9fc6d7895c294dc9ull, 8);
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9fc6d7895c294dc9ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("ghostfs.capnp:GhostFS", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        lookup(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::LookupParams,  ::GhostFS::LookupResults>(context)),
        false
      };
    case 1:
      return {
        getattr(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>(context)),
        false
      };
    case 2:
      return {
        setattr(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>(context)),
        false
      };
    case 3:
      return {
        mknod(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::MknodParams,  ::GhostFS::MknodResults>(context)),
        false
      };
    case 4:
      return {
        mkdir(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>(context)),
        false
      };
    case 5:
      return {
        unlink(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>(context)),
        false
      };
    case 6:
      return {
        read(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::ReadParams,  ::GhostFS::ReadResults>(context)),
        false
      };
    case 7:
      return {
        write(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(context)),
        false
      };
    case 8:
      return {
        create(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::CreateParams,  ::GhostFS::CreateResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "ghostfs.capnp:GhostFS",
          0x9fc6d7895c294dc9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFS
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::LookupParams
constexpr uint16_t GhostFS::LookupParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::LookupParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::LookupParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::LookupParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::LookupResults
constexpr uint16_t GhostFS::LookupResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::LookupResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::LookupResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::LookupResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::GetattrParams
constexpr uint16_t GhostFS::GetattrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::GetattrParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::GetattrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::GetattrParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::GetattrResults
constexpr uint16_t GhostFS::GetattrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::GetattrResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::GetattrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::GetattrResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetattrParams
constexpr uint16_t GhostFS::SetattrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetattrParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetattrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetattrParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetattrResults
constexpr uint16_t GhostFS::SetattrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetattrResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetattrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetattrResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MknodParams
constexpr uint16_t GhostFS::MknodParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MknodParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MknodParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MknodParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MknodResults
constexpr uint16_t GhostFS::MknodResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MknodResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MknodResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MknodResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MkdirParams
constexpr uint16_t GhostFS::MkdirParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MkdirParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MkdirParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MkdirParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MkdirResults
constexpr uint16_t GhostFS::MkdirResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MkdirResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MkdirResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MkdirResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::UnlinkParams
constexpr uint16_t GhostFS::UnlinkParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::UnlinkParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::UnlinkParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::UnlinkParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::UnlinkResults
constexpr uint16_t GhostFS::UnlinkResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::UnlinkResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::UnlinkResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::UnlinkResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReadParams
constexpr uint16_t GhostFS::ReadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReadParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReadParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReadResults
constexpr uint16_t GhostFS::ReadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReadResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReadResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteParams
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteResults
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::CreateParams
constexpr uint16_t GhostFS::CreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::CreateParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::CreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::CreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::CreateResults
constexpr uint16_t GhostFS::CreateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::CreateResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::CreateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::CreateResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE




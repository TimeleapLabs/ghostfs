// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ghostfs.capnp

#include "ghostfs.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<29> b_9fc6d7895c294dc9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  77,  41,  92, 137, 215, 198, 159,
     20,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
    233, 109,  45, 163, 132,  22,  80, 168,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9fc6d7895c294dc9 = b_9fc6d7895c294dc9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9fc6d7895c294dc9[] = {
  &s_a8501684a32d6de9,
  &s_b0836f411d2abe3b,
};
static const uint16_t m_9fc6d7895c294dc9[] = {0};
const ::capnp::_::RawSchema s_9fc6d7895c294dc9 = {
  0x9fc6d7895c294dc9, b_9fc6d7895c294dc9.words, 29, d_9fc6d7895c294dc9, m_9fc6d7895c294dc9,
  2, 1, nullptr, nullptr, nullptr, { &s_9fc6d7895c294dc9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b0836f411d2abe3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 119, 114, 105, 116,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 117,  12, 146, 248, 131,  24, 147,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0836f411d2abe3b = b_b0836f411d2abe3b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0836f411d2abe3b[] = {
  &s_931883f8920c7515,
};
static const uint16_t m_b0836f411d2abe3b[] = {0};
static const uint16_t i_b0836f411d2abe3b[] = {0};
const ::capnp::_::RawSchema s_b0836f411d2abe3b = {
  0xb0836f411d2abe3b, b_b0836f411d2abe3b.words, 34, d_b0836f411d2abe3b, m_b0836f411d2abe3b,
  1, 1, i_b0836f411d2abe3b, nullptr, nullptr, { &s_b0836f411d2abe3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a8501684a32d6de9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 109,  45, 163, 132,  22,  80, 168,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 119, 114, 105, 116,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     36,  86, 228, 109, 250,   9, 121, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8501684a32d6de9 = b_a8501684a32d6de9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8501684a32d6de9[] = {
  &s_ec7909fa6de45624,
};
static const uint16_t m_a8501684a32d6de9[] = {0};
static const uint16_t i_a8501684a32d6de9[] = {0};
const ::capnp::_::RawSchema s_a8501684a32d6de9 = {
  0xa8501684a32d6de9, b_a8501684a32d6de9.words, 34, d_a8501684a32d6de9, m_a8501684a32d6de9,
  1, 1, i_a8501684a32d6de9, nullptr, nullptr, { &s_a8501684a32d6de9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>
GhostFS::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(
      0x9fc6d7895c294dc9ull, 0, sizeHint);
}
::kj::Promise<void> GhostFS::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "write",
      0x9fc6d7895c294dc9ull, 0);
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9fc6d7895c294dc9ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/ghostfs.capnp:GhostFS", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        write(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/ghostfs.capnp:GhostFS",
          0x9fc6d7895c294dc9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFS
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteParams
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteResults
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE




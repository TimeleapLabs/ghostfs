// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ghostfs.capnp

#include "ghostfs.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<51> b_95a8f5ede3b691d4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212, 145, 182, 227, 237, 245, 168, 149,
     20,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 199,   0,   0,   0,
    157,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    162, 211,  84,   8,  31, 160, 252, 231,
      9, 121, 244,  20, 227, 136, 214, 234,
     81,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     57, 188, 125, 125,  40, 103,  11, 175,
    226, 169, 228,   7, 127,  26, 153, 170,
     61,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    154, 128, 188, 240,  72, 145,  89, 223,
     56, 225, 160,  43,  61, 157, 173, 215,
     37,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     97, 117, 116, 104, 111, 114, 105, 122,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 111, 117, 110, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110, 109, 111, 117, 110, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_95a8f5ede3b691d4 = b_95a8f5ede3b691d4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_95a8f5ede3b691d4[] = {
  &s_aa991a7f07e4a9e2,
  &s_af0b67287d7dbc39,
  &s_d7ad9d3d2ba0e138,
  &s_df599148f0bc809a,
  &s_e7fca01f0854d3a2,
  &s_ead688e314f47909,
};
static const uint16_t m_95a8f5ede3b691d4[] = {0, 1, 2};
const ::capnp::_::RawSchema s_95a8f5ede3b691d4 = {
  0x95a8f5ede3b691d4, b_95a8f5ede3b691d4.words, 51, d_95a8f5ede3b691d4, m_95a8f5ede3b691d4,
  6, 3, nullptr, nullptr, nullptr, { &s_95a8f5ede3b691d4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<80> b_e7fca01f0854d3a2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    162, 211,  84,   8,  31, 160, 252, 231,
     38,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46,  97, 117,
    116, 104, 111, 114, 105, 122, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 114, 105, 101, 115,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 120, 112, 105, 114, 101, 115,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e7fca01f0854d3a2 = b_e7fca01f0854d3a2.words;
#if !CAPNP_LITE
static const uint16_t m_e7fca01f0854d3a2[] = {3, 2, 1, 0};
static const uint16_t i_e7fca01f0854d3a2[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e7fca01f0854d3a2 = {
  0xe7fca01f0854d3a2, b_e7fca01f0854d3a2.words, 80, nullptr, m_e7fca01f0854d3a2,
  0, 4, i_e7fca01f0854d3a2, nullptr, nullptr, { &s_e7fca01f0854d3a2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ead688e314f47909 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 121, 244,  20, 227, 136, 214, 234,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46,  97, 117,
    116, 104, 111, 114, 105, 122, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ead688e314f47909 = b_ead688e314f47909.words;
#if !CAPNP_LITE
static const uint16_t m_ead688e314f47909[] = {0};
static const uint16_t i_ead688e314f47909[] = {0};
const ::capnp::_::RawSchema s_ead688e314f47909 = {
  0xead688e314f47909, b_ead688e314f47909.words, 35, nullptr, m_ead688e314f47909,
  0, 1, i_ead688e314f47909, nullptr, nullptr, { &s_ead688e314f47909, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_af0b67287d7dbc39 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57, 188, 125, 125,  40, 103,  11, 175,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46, 109, 111,
    117, 110, 116,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 117, 114,  99, 101,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115, 116, 105, 110,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_af0b67287d7dbc39 = b_af0b67287d7dbc39.words;
#if !CAPNP_LITE
static const uint16_t m_af0b67287d7dbc39[] = {2, 1, 0};
static const uint16_t i_af0b67287d7dbc39[] = {0, 1, 2};
const ::capnp::_::RawSchema s_af0b67287d7dbc39 = {
  0xaf0b67287d7dbc39, b_af0b67287d7dbc39.words, 66, nullptr, m_af0b67287d7dbc39,
  0, 3, i_af0b67287d7dbc39, nullptr, nullptr, { &s_af0b67287d7dbc39, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_aa991a7f07e4a9e2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    226, 169, 228,   7, 127,  26, 153, 170,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46, 109, 111,
    117, 110, 116,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa991a7f07e4a9e2 = b_aa991a7f07e4a9e2.words;
#if !CAPNP_LITE
static const uint16_t m_aa991a7f07e4a9e2[] = {0};
static const uint16_t i_aa991a7f07e4a9e2[] = {0};
const ::capnp::_::RawSchema s_aa991a7f07e4a9e2 = {
  0xaa991a7f07e4a9e2, b_aa991a7f07e4a9e2.words, 35, nullptr, m_aa991a7f07e4a9e2,
  0, 1, i_aa991a7f07e4a9e2, nullptr, nullptr, { &s_aa991a7f07e4a9e2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_df599148f0bc809a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 128, 188, 240,  72, 145,  89, 223,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46, 117, 110,
    109, 111, 117, 110, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115, 116, 105, 110,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df599148f0bc809a = b_df599148f0bc809a.words;
#if !CAPNP_LITE
static const uint16_t m_df599148f0bc809a[] = {1, 0};
static const uint16_t i_df599148f0bc809a[] = {0, 1};
const ::capnp::_::RawSchema s_df599148f0bc809a = {
  0xdf599148f0bc809a, b_df599148f0bc809a.words, 51, nullptr, m_df599148f0bc809a,
  0, 2, i_df599148f0bc809a, nullptr, nullptr, { &s_df599148f0bc809a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d7ad9d3d2ba0e138 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     56, 225, 160,  43,  61, 157, 173, 215,
     38,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  83,
    101, 114, 118, 101, 114,  46, 117, 110,
    109, 111, 117, 110, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7ad9d3d2ba0e138 = b_d7ad9d3d2ba0e138.words;
#if !CAPNP_LITE
static const uint16_t m_d7ad9d3d2ba0e138[] = {0};
static const uint16_t i_d7ad9d3d2ba0e138[] = {0};
const ::capnp::_::RawSchema s_d7ad9d3d2ba0e138 = {
  0xd7ad9d3d2ba0e138, b_d7ad9d3d2ba0e138.words, 35, nullptr, m_d7ad9d3d2ba0e138,
  0, 1, i_d7ad9d3d2ba0e138, nullptr, nullptr, { &s_d7ad9d3d2ba0e138, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_b7e9256c41304f3c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,  79,  48,  65, 108,  37, 233, 183,
     20,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,  75,  70, 189, 131, 227,   7, 158,
     70, 205, 208, 140,  32, 141, 241, 198,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     97, 117, 116, 104,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b7e9256c41304f3c = b_b7e9256c41304f3c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b7e9256c41304f3c[] = {
  &s_9e07e383bd464b04,
  &s_c6f18d208cd0cd46,
};
static const uint16_t m_b7e9256c41304f3c[] = {0};
const ::capnp::_::RawSchema s_b7e9256c41304f3c = {
  0xb7e9256c41304f3c, b_b7e9256c41304f3c.words, 29, d_b7e9256c41304f3c, m_b7e9256c41304f3c,
  2, 1, nullptr, nullptr, nullptr, { &s_b7e9256c41304f3c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_9e07e383bd464b04 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4,  75,  70, 189, 131, 227,   7, 158,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  46,
     97, 117, 116, 104,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101, 114,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111, 107, 101, 110,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e07e383bd464b04 = b_9e07e383bd464b04.words;
#if !CAPNP_LITE
static const uint16_t m_9e07e383bd464b04[] = {1, 0};
static const uint16_t i_9e07e383bd464b04[] = {0, 1};
const ::capnp::_::RawSchema s_9e07e383bd464b04 = {
  0x9e07e383bd464b04, b_9e07e383bd464b04.words, 49, nullptr, m_9e07e383bd464b04,
  0, 2, i_9e07e383bd464b04, nullptr, nullptr, { &s_9e07e383bd464b04, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_c6f18d208cd0cd46 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70, 205, 208, 140,  32, 141, 241, 198,
     32,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  65, 117, 116, 104,  46,
     97, 117, 116, 104,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    103, 104, 111, 115, 116,  70, 115,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    201,  77,  41,  92, 137, 215, 198, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 117, 116, 104,  83, 117,  99,  99,
    101, 115, 115,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6f18d208cd0cd46 = b_c6f18d208cd0cd46.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c6f18d208cd0cd46[] = {
  &s_9fc6d7895c294dc9,
};
static const uint16_t m_c6f18d208cd0cd46[] = {1, 0};
static const uint16_t i_c6f18d208cd0cd46[] = {0, 1};
const ::capnp::_::RawSchema s_c6f18d208cd0cd46 = {
  0xc6f18d208cd0cd46, b_c6f18d208cd0cd46.words, 50, d_c6f18d208cd0cd46, m_c6f18d208cd0cd46,
  1, 2, i_c6f18d208cd0cd46, nullptr, nullptr, { &s_c6f18d208cd0cd46, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<201> b_9fc6d7895c294dc9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201,  77,  41,  92, 137, 215, 198, 159,
     20,   0,   0,   0,   3,   0,   0,   0,
     41,   2, 158, 208, 114, 202, 113, 140,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   4,   0,   0,
    245,   2,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     72,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
    233, 109,  45, 163, 132,  22,  80, 168,
     49,   2,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   2,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     54,  67, 132,  84,  15, 254,  32, 187,
    217, 176,  59, 205,  40,  91, 243, 132,
     25,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   2,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    127, 230, 115, 117, 215, 142,  85, 255,
    133,  86,  41, 154, 145,  11, 227, 227,
      1,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    245,   1,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     61,  92, 234, 207,  95, 102,  54, 234,
    245, 152,  45, 230,  40,  14, 236, 219,
    233,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    204,  46, 203, 253, 252, 133,   7, 208,
     99, 193, 162,  74, 155, 244, 125, 231,
    209,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     72,  49, 149, 238,  54, 206,  26, 149,
     34,  31, 173, 253,  49, 187,  31, 227,
    185,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    109, 179, 114,  37, 122, 176, 224, 205,
    111,  81, 180, 155,  59, 233,   9, 192,
    161,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   1,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     43, 248, 226, 219, 222, 233, 244, 237,
     18,  70,   7, 126, 240, 161, 143, 222,
    137,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   1,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     15,  32,  87,  92, 134, 159, 144, 234,
    128, 234, 151, 126,  87, 105, 151, 164,
    113,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   1,   0,   0,   7,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    126, 212, 180, 124,  89, 111, 223, 232,
    239, 135,  39, 143, 232,  90,  70, 180,
     89,   1,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   1,   0,   0,   7,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    230, 140, 243, 169,  70,  84, 176, 135,
     83, 132, 231,  68, 174,  52,  29, 218,
     65,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   1,   0,   0,   7,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     27, 209,  44,  20,  67, 158,  60, 149,
    134, 163,  25, 206,  95, 183, 181, 241,
     41,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     74, 118, 160, 252,  39,  45, 165, 247,
    148, 217,  97, 183, 250, 200, 142, 218,
     17,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    247,  73, 248, 172,  67,  24, 131, 202,
    218, 185, 192,  20,  50,  94, 159, 253,
    249,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     51, 174, 167, 229, 179, 103,  97, 154,
    180,   7,  89, 160,  43,  96, 199, 172,
    229,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     21, 111,  49,   0,   1, 222, 189, 186,
    103, 233,   4, 176,  66, 192, 219, 237,
    205,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    127, 236, 131, 220,   9,  77, 221, 244,
    230,  30,  86, 224, 177,  51, 243, 244,
    181,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    247,  43,  25, 132,  68, 239, 135, 141,
    196,  69, 163, 188,  37,  23, 165, 197,
    157,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
    108, 111, 111, 107, 117, 112,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  97, 116, 116, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  97, 116, 116, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 107, 110, 111, 100,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 107, 100, 105, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110, 108, 105, 110, 107,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 109, 100, 105, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 110,  97, 109, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    111, 112, 101, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97, 100, 100, 105, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116, 120,  97, 116, 116, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 108, 117, 115, 104,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 115, 121, 110,  99,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     98, 117, 108, 107,  87, 114, 105, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9fc6d7895c294dc9 = b_9fc6d7895c294dc9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9fc6d7895c294dc9[] = {
  &s_84f35b28cd3bb0d9,
  &s_87b05446a9f38ce6,
  &s_8d87ef4484192bf7,
  &s_951ace36ee953148,
  &s_953c9e43142cd11b,
  &s_9a6167b3e5a7ae33,
  &s_a49769577e97ea80,
  &s_a8501684a32d6de9,
  &s_acc7602ba05907b4,
  &s_b0836f411d2abe3b,
  &s_b4465ae88f2787ef,
  &s_babdde0100316f15,
  &s_bb20fe0f54844336,
  &s_c009e93b9bb4516f,
  &s_c5a51725bca345c4,
  &s_ca831843acf849f7,
  &s_cde0b07a2572b36d,
  &s_d00785fcfdcb2ecc,
  &s_da1d34ae44e78453,
  &s_da8ec8fab761d994,
  &s_dbec0e28e62d98f5,
  &s_de8fa1f07e074612,
  &s_e31fbb31fdad1f22,
  &s_e3e30b919a295685,
  &s_e77df49b4aa2c163,
  &s_e8df6f597cb4d47e,
  &s_ea36665fcfea5c3d,
  &s_ea909f865c57200f,
  &s_eddbc042b004e967,
  &s_edf4e9dedbe2f82b,
  &s_f1b5b75fce19a386,
  &s_f4dd4d09dc83ec7f,
  &s_f4f333b1e0561ee6,
  &s_f7a52d27fca0764a,
  &s_fd9f5e3214c0b9da,
  &s_ff558ed77573e67f,
};
static const uint16_t m_9fc6d7895c294dc9[] = {17, 14, 15, 16, 1, 0, 4, 3, 8, 9, 12, 11, 7, 6, 2, 13, 5, 10};
const ::capnp::_::RawSchema s_9fc6d7895c294dc9 = {
  0x9fc6d7895c294dc9, b_9fc6d7895c294dc9.words, 201, d_9fc6d7895c294dc9, m_9fc6d7895c294dc9,
  36, 18, nullptr, nullptr, nullptr, { &s_9fc6d7895c294dc9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b0836f411d2abe3b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59, 190,  42,  29,  65, 111, 131, 176,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 108, 111, 111, 107,
    117, 112,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    209, 215,  34, 203, 162,  51, 177, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0836f411d2abe3b = b_b0836f411d2abe3b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0836f411d2abe3b[] = {
  &s_99b133a2cb22d7d1,
};
static const uint16_t m_b0836f411d2abe3b[] = {0};
static const uint16_t i_b0836f411d2abe3b[] = {0};
const ::capnp::_::RawSchema s_b0836f411d2abe3b = {
  0xb0836f411d2abe3b, b_b0836f411d2abe3b.words, 34, d_b0836f411d2abe3b, m_b0836f411d2abe3b,
  1, 1, i_b0836f411d2abe3b, nullptr, nullptr, { &s_b0836f411d2abe3b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a8501684a32d6de9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 109,  45, 163, 132,  22,  80, 168,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 108, 111, 111, 107,
    117, 112,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     18, 114, 255, 105,  52,  23, 103, 163,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8501684a32d6de9 = b_a8501684a32d6de9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8501684a32d6de9[] = {
  &s_a367173469ff7212,
};
static const uint16_t m_a8501684a32d6de9[] = {0};
static const uint16_t i_a8501684a32d6de9[] = {0};
const ::capnp::_::RawSchema s_a8501684a32d6de9 = {
  0xa8501684a32d6de9, b_a8501684a32d6de9.words, 34, d_a8501684a32d6de9, m_a8501684a32d6de9,
  1, 1, i_a8501684a32d6de9, nullptr, nullptr, { &s_a8501684a32d6de9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bb20fe0f54844336 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54,  67, 132,  84,  15, 254,  32, 187,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 103, 101, 116,  97,
    116, 116, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     32,  68, 216, 177, 242, 252, 204, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb20fe0f54844336 = b_bb20fe0f54844336.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb20fe0f54844336[] = {
  &s_f9ccfcf2b1d84420,
};
static const uint16_t m_bb20fe0f54844336[] = {0};
static const uint16_t i_bb20fe0f54844336[] = {0};
const ::capnp::_::RawSchema s_bb20fe0f54844336 = {
  0xbb20fe0f54844336, b_bb20fe0f54844336.words, 34, d_bb20fe0f54844336, m_bb20fe0f54844336,
  1, 1, i_bb20fe0f54844336, nullptr, nullptr, { &s_bb20fe0f54844336, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_84f35b28cd3bb0d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217, 176,  59, 205,  40,  91, 243, 132,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 103, 101, 116,  97,
    116, 116, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     22,  43, 192, 114, 176,  26, 130, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_84f35b28cd3bb0d9 = b_84f35b28cd3bb0d9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_84f35b28cd3bb0d9[] = {
  &s_dd821ab072c02b16,
};
static const uint16_t m_84f35b28cd3bb0d9[] = {0};
static const uint16_t i_84f35b28cd3bb0d9[] = {0};
const ::capnp::_::RawSchema s_84f35b28cd3bb0d9 = {
  0x84f35b28cd3bb0d9, b_84f35b28cd3bb0d9.words, 34, d_84f35b28cd3bb0d9, m_84f35b28cd3bb0d9,
  1, 1, i_84f35b28cd3bb0d9, nullptr, nullptr, { &s_84f35b28cd3bb0d9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ff558ed77573e67f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 230, 115, 117, 215, 142,  85, 255,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 115, 101, 116,  97,
    116, 116, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    115, 246, 117,  96,   2, 230,  76, 184,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff558ed77573e67f = b_ff558ed77573e67f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff558ed77573e67f[] = {
  &s_b84ce6026075f673,
};
static const uint16_t m_ff558ed77573e67f[] = {0};
static const uint16_t i_ff558ed77573e67f[] = {0};
const ::capnp::_::RawSchema s_ff558ed77573e67f = {
  0xff558ed77573e67f, b_ff558ed77573e67f.words, 34, d_ff558ed77573e67f, m_ff558ed77573e67f,
  1, 1, i_ff558ed77573e67f, nullptr, nullptr, { &s_ff558ed77573e67f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e3e30b919a295685 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133,  86,  41, 154, 145,  11, 227, 227,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 115, 101, 116,  97,
    116, 116, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    244,  54, 217, 217, 168, 195,  69, 182,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3e30b919a295685 = b_e3e30b919a295685.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e3e30b919a295685[] = {
  &s_b645c3a8d9d936f4,
};
static const uint16_t m_e3e30b919a295685[] = {0};
static const uint16_t i_e3e30b919a295685[] = {0};
const ::capnp::_::RawSchema s_e3e30b919a295685 = {
  0xe3e30b919a295685, b_e3e30b919a295685.words, 34, d_e3e30b919a295685, m_e3e30b919a295685,
  1, 1, i_e3e30b919a295685, nullptr, nullptr, { &s_e3e30b919a295685, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ea36665fcfea5c3d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     61,  92, 234, 207,  95, 102,  54, 234,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 109, 107, 110, 111,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     97, 126, 201, 221, 129,  12,   0, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea36665fcfea5c3d = b_ea36665fcfea5c3d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea36665fcfea5c3d[] = {
  &s_a0000c81ddc97e61,
};
static const uint16_t m_ea36665fcfea5c3d[] = {0};
static const uint16_t i_ea36665fcfea5c3d[] = {0};
const ::capnp::_::RawSchema s_ea36665fcfea5c3d = {
  0xea36665fcfea5c3d, b_ea36665fcfea5c3d.words, 34, d_ea36665fcfea5c3d, m_ea36665fcfea5c3d,
  1, 1, i_ea36665fcfea5c3d, nullptr, nullptr, { &s_ea36665fcfea5c3d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_dbec0e28e62d98f5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    245, 152,  45, 230,  40,  14, 236, 219,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 109, 107, 110, 111,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    205,  14,  89, 171,  72,   7, 168, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbec0e28e62d98f5 = b_dbec0e28e62d98f5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dbec0e28e62d98f5[] = {
  &s_8ea80748ab590ecd,
};
static const uint16_t m_dbec0e28e62d98f5[] = {0};
static const uint16_t i_dbec0e28e62d98f5[] = {0};
const ::capnp::_::RawSchema s_dbec0e28e62d98f5 = {
  0xdbec0e28e62d98f5, b_dbec0e28e62d98f5.words, 34, d_dbec0e28e62d98f5, m_dbec0e28e62d98f5,
  1, 1, i_dbec0e28e62d98f5, nullptr, nullptr, { &s_dbec0e28e62d98f5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d00785fcfdcb2ecc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  46, 203, 253, 252, 133,   7, 208,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 109, 107, 100, 105,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     28,  23, 132,  44, 136, 138, 133, 224,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d00785fcfdcb2ecc = b_d00785fcfdcb2ecc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d00785fcfdcb2ecc[] = {
  &s_e0858a882c84171c,
};
static const uint16_t m_d00785fcfdcb2ecc[] = {0};
static const uint16_t i_d00785fcfdcb2ecc[] = {0};
const ::capnp::_::RawSchema s_d00785fcfdcb2ecc = {
  0xd00785fcfdcb2ecc, b_d00785fcfdcb2ecc.words, 34, d_d00785fcfdcb2ecc, m_d00785fcfdcb2ecc,
  1, 1, i_d00785fcfdcb2ecc, nullptr, nullptr, { &s_d00785fcfdcb2ecc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e77df49b4aa2c163 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     99, 193, 162,  74, 155, 244, 125, 231,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 109, 107, 100, 105,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    224, 165,  48, 137,  33,  26, 246, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e77df49b4aa2c163 = b_e77df49b4aa2c163.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e77df49b4aa2c163[] = {
  &s_f7f61a218930a5e0,
};
static const uint16_t m_e77df49b4aa2c163[] = {0};
static const uint16_t i_e77df49b4aa2c163[] = {0};
const ::capnp::_::RawSchema s_e77df49b4aa2c163 = {
  0xe77df49b4aa2c163, b_e77df49b4aa2c163.words, 34, d_e77df49b4aa2c163, m_e77df49b4aa2c163,
  1, 1, i_e77df49b4aa2c163, nullptr, nullptr, { &s_e77df49b4aa2c163, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_951ace36ee953148 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72,  49, 149, 238,  54, 206,  26, 149,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 117, 110, 108, 105,
    110, 107,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    130, 245,  15, 215, 100,  94,  99, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_951ace36ee953148 = b_951ace36ee953148.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_951ace36ee953148[] = {
  &s_9f635e64d70ff582,
};
static const uint16_t m_951ace36ee953148[] = {0};
static const uint16_t i_951ace36ee953148[] = {0};
const ::capnp::_::RawSchema s_951ace36ee953148 = {
  0x951ace36ee953148, b_951ace36ee953148.words, 34, d_951ace36ee953148, m_951ace36ee953148,
  1, 1, i_951ace36ee953148, nullptr, nullptr, { &s_951ace36ee953148, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e31fbb31fdad1f22 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,  31, 173, 253,  49, 187,  31, 227,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 117, 110, 108, 105,
    110, 107,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     85, 197,  29, 120,  61,  11,  86, 207,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e31fbb31fdad1f22 = b_e31fbb31fdad1f22.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e31fbb31fdad1f22[] = {
  &s_cf560b3d781dc555,
};
static const uint16_t m_e31fbb31fdad1f22[] = {0};
static const uint16_t i_e31fbb31fdad1f22[] = {0};
const ::capnp::_::RawSchema s_e31fbb31fdad1f22 = {
  0xe31fbb31fdad1f22, b_e31fbb31fdad1f22.words, 34, d_e31fbb31fdad1f22, m_e31fbb31fdad1f22,
  1, 1, i_e31fbb31fdad1f22, nullptr, nullptr, { &s_e31fbb31fdad1f22, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_cde0b07a2572b36d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    109, 179, 114,  37, 122, 176, 224, 205,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 109, 100, 105,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     89,  54, 168,  26, 104, 124, 226, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cde0b07a2572b36d = b_cde0b07a2572b36d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cde0b07a2572b36d[] = {
  &s_c1e27c681aa83659,
};
static const uint16_t m_cde0b07a2572b36d[] = {0};
static const uint16_t i_cde0b07a2572b36d[] = {0};
const ::capnp::_::RawSchema s_cde0b07a2572b36d = {
  0xcde0b07a2572b36d, b_cde0b07a2572b36d.words, 34, d_cde0b07a2572b36d, m_cde0b07a2572b36d,
  1, 1, i_cde0b07a2572b36d, nullptr, nullptr, { &s_cde0b07a2572b36d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c009e93b9bb4516f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111,  81, 180, 155,  59, 233,   9, 192,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 109, 100, 105,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     36,  50,  38, 231, 147, 159, 196, 225,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c009e93b9bb4516f = b_c009e93b9bb4516f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c009e93b9bb4516f[] = {
  &s_e1c49f93e7263224,
};
static const uint16_t m_c009e93b9bb4516f[] = {0};
static const uint16_t i_c009e93b9bb4516f[] = {0};
const ::capnp::_::RawSchema s_c009e93b9bb4516f = {
  0xc009e93b9bb4516f, b_c009e93b9bb4516f.words, 34, d_c009e93b9bb4516f, m_c009e93b9bb4516f,
  1, 1, i_c009e93b9bb4516f, nullptr, nullptr, { &s_c009e93b9bb4516f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_edf4e9dedbe2f82b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     43, 248, 226, 219, 222, 233, 244, 237,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101, 110,  97,
    109, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    118,  34,  86, 234, 109, 237, 105, 129,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edf4e9dedbe2f82b = b_edf4e9dedbe2f82b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edf4e9dedbe2f82b[] = {
  &s_8169ed6dea562276,
};
static const uint16_t m_edf4e9dedbe2f82b[] = {0};
static const uint16_t i_edf4e9dedbe2f82b[] = {0};
const ::capnp::_::RawSchema s_edf4e9dedbe2f82b = {
  0xedf4e9dedbe2f82b, b_edf4e9dedbe2f82b.words, 34, d_edf4e9dedbe2f82b, m_edf4e9dedbe2f82b,
  1, 1, i_edf4e9dedbe2f82b, nullptr, nullptr, { &s_edf4e9dedbe2f82b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_de8fa1f07e074612 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18,  70,   7, 126, 240, 161, 143, 222,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101, 110,  97,
    109, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211,  86, 204, 194, 229,   1,  59, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_de8fa1f07e074612 = b_de8fa1f07e074612.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_de8fa1f07e074612[] = {
  &s_ca3b01e5c2cc56d3,
};
static const uint16_t m_de8fa1f07e074612[] = {0};
static const uint16_t i_de8fa1f07e074612[] = {0};
const ::capnp::_::RawSchema s_de8fa1f07e074612 = {
  0xde8fa1f07e074612, b_de8fa1f07e074612.words, 34, d_de8fa1f07e074612, m_de8fa1f07e074612,
  1, 1, i_de8fa1f07e074612, nullptr, nullptr, { &s_de8fa1f07e074612, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ea909f865c57200f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     15,  32,  87,  92, 134, 159, 144, 234,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 111, 112, 101, 110,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    233, 236, 173, 144, 178, 173,  18, 205,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea909f865c57200f = b_ea909f865c57200f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ea909f865c57200f[] = {
  &s_cd12adb290adece9,
};
static const uint16_t m_ea909f865c57200f[] = {0};
static const uint16_t i_ea909f865c57200f[] = {0};
const ::capnp::_::RawSchema s_ea909f865c57200f = {
  0xea909f865c57200f, b_ea909f865c57200f.words, 33, d_ea909f865c57200f, m_ea909f865c57200f,
  1, 1, i_ea909f865c57200f, nullptr, nullptr, { &s_ea909f865c57200f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a49769577e97ea80 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    128, 234, 151, 126,  87, 105, 151, 164,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 111, 112, 101, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    102, 178,  19,  31, 239,  89,   4, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a49769577e97ea80 = b_a49769577e97ea80.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a49769577e97ea80[] = {
  &s_ad0459ef1f13b266,
};
static const uint16_t m_a49769577e97ea80[] = {0};
static const uint16_t i_a49769577e97ea80[] = {0};
const ::capnp::_::RawSchema s_a49769577e97ea80 = {
  0xa49769577e97ea80, b_a49769577e97ea80.words, 34, d_a49769577e97ea80, m_a49769577e97ea80,
  1, 1, i_a49769577e97ea80, nullptr, nullptr, { &s_a49769577e97ea80, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e8df6f597cb4d47e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126, 212, 180, 124,  89, 111, 223, 232,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101,  97, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    157, 176, 155,  49,  28, 218, 108, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8df6f597cb4d47e = b_e8df6f597cb4d47e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8df6f597cb4d47e[] = {
  &s_9c6cda1c319bb09d,
};
static const uint16_t m_e8df6f597cb4d47e[] = {0};
static const uint16_t i_e8df6f597cb4d47e[] = {0};
const ::capnp::_::RawSchema s_e8df6f597cb4d47e = {
  0xe8df6f597cb4d47e, b_e8df6f597cb4d47e.words, 33, d_e8df6f597cb4d47e, m_e8df6f597cb4d47e,
  1, 1, i_e8df6f597cb4d47e, nullptr, nullptr, { &s_e8df6f597cb4d47e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b4465ae88f2787ef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239, 135,  39, 143, 232,  90,  70, 180,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101,  97, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101, 120,   8, 142,  68, 101, 173, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4465ae88f2787ef = b_b4465ae88f2787ef.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b4465ae88f2787ef[] = {
  &s_99ad65448e087865,
};
static const uint16_t m_b4465ae88f2787ef[] = {0};
static const uint16_t i_b4465ae88f2787ef[] = {0};
const ::capnp::_::RawSchema s_b4465ae88f2787ef = {
  0xb4465ae88f2787ef, b_b4465ae88f2787ef.words, 34, d_b4465ae88f2787ef, m_b4465ae88f2787ef,
  1, 1, i_b4465ae88f2787ef, nullptr, nullptr, { &s_b4465ae88f2787ef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_87b05446a9f38ce6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 140, 243, 169,  70,  84, 176, 135,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 119, 114, 105, 116,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 117,  12, 146, 248, 131,  24, 147,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_87b05446a9f38ce6 = b_87b05446a9f38ce6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_87b05446a9f38ce6[] = {
  &s_931883f8920c7515,
};
static const uint16_t m_87b05446a9f38ce6[] = {0};
static const uint16_t i_87b05446a9f38ce6[] = {0};
const ::capnp::_::RawSchema s_87b05446a9f38ce6 = {
  0x87b05446a9f38ce6, b_87b05446a9f38ce6.words, 34, d_87b05446a9f38ce6, m_87b05446a9f38ce6,
  1, 1, i_87b05446a9f38ce6, nullptr, nullptr, { &s_87b05446a9f38ce6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_da1d34ae44e78453 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 132, 231,  68, 174,  52,  29, 218,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 119, 114, 105, 116,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     36,  86, 228, 109, 250,   9, 121, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da1d34ae44e78453 = b_da1d34ae44e78453.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da1d34ae44e78453[] = {
  &s_ec7909fa6de45624,
};
static const uint16_t m_da1d34ae44e78453[] = {0};
static const uint16_t i_da1d34ae44e78453[] = {0};
const ::capnp::_::RawSchema s_da1d34ae44e78453 = {
  0xda1d34ae44e78453, b_da1d34ae44e78453.words, 34, d_da1d34ae44e78453, m_da1d34ae44e78453,
  1, 1, i_da1d34ae44e78453, nullptr, nullptr, { &s_da1d34ae44e78453, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_953c9e43142cd11b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     27, 209,  44,  20,  67, 158,  60, 149,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101, 108, 101,
     97, 115, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    137,  30,  24, 248, 101,  28, 115, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_953c9e43142cd11b = b_953c9e43142cd11b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_953c9e43142cd11b[] = {
  &s_c3731c65f8181e89,
};
static const uint16_t m_953c9e43142cd11b[] = {0};
static const uint16_t i_953c9e43142cd11b[] = {0};
const ::capnp::_::RawSchema s_953c9e43142cd11b = {
  0x953c9e43142cd11b, b_953c9e43142cd11b.words, 34, d_953c9e43142cd11b, m_953c9e43142cd11b,
  1, 1, i_953c9e43142cd11b, nullptr, nullptr, { &s_953c9e43142cd11b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f1b5b75fce19a386 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134, 163,  25, 206,  95, 183, 181, 241,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101, 108, 101,
     97, 115, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     25, 179,  69, 111, 178,   3, 190, 171,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1b5b75fce19a386 = b_f1b5b75fce19a386.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f1b5b75fce19a386[] = {
  &s_abbe03b26f45b319,
};
static const uint16_t m_f1b5b75fce19a386[] = {0};
static const uint16_t i_f1b5b75fce19a386[] = {0};
const ::capnp::_::RawSchema s_f1b5b75fce19a386 = {
  0xf1b5b75fce19a386, b_f1b5b75fce19a386.words, 34, d_f1b5b75fce19a386, m_f1b5b75fce19a386,
  1, 1, i_f1b5b75fce19a386, nullptr, nullptr, { &s_f1b5b75fce19a386, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f7a52d27fca0764a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74, 118, 160, 252,  39,  45, 165, 247,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101,  97, 100,
    100, 105, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 166,  91, 195,  35, 138, 221, 184,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7a52d27fca0764a = b_f7a52d27fca0764a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f7a52d27fca0764a[] = {
  &s_b8dd8a23c35ba64b,
};
static const uint16_t m_f7a52d27fca0764a[] = {0};
static const uint16_t i_f7a52d27fca0764a[] = {0};
const ::capnp::_::RawSchema s_f7a52d27fca0764a = {
  0xf7a52d27fca0764a, b_f7a52d27fca0764a.words, 34, d_f7a52d27fca0764a, m_f7a52d27fca0764a,
  1, 1, i_f7a52d27fca0764a, nullptr, nullptr, { &s_f7a52d27fca0764a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_da8ec8fab761d994 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148, 217,  97, 183, 250, 200, 142, 218,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 114, 101,  97, 100,
    100, 105, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    145,   6, 170,  69, 140, 152, 144, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da8ec8fab761d994 = b_da8ec8fab761d994.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_da8ec8fab761d994[] = {
  &s_f790988c45aa0691,
};
static const uint16_t m_da8ec8fab761d994[] = {0};
static const uint16_t i_da8ec8fab761d994[] = {0};
const ::capnp::_::RawSchema s_da8ec8fab761d994 = {
  0xda8ec8fab761d994, b_da8ec8fab761d994.words, 34, d_da8ec8fab761d994, m_da8ec8fab761d994,
  1, 1, i_da8ec8fab761d994, nullptr, nullptr, { &s_da8ec8fab761d994, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ca831843acf849f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  73, 248, 172,  67,  24, 131, 202,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 115, 101, 116, 120,
     97, 116, 116, 114,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     18,  81, 158, 118, 123, 227, 114, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca831843acf849f7 = b_ca831843acf849f7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca831843acf849f7[] = {
  &s_9d72e37b769e5112,
};
static const uint16_t m_ca831843acf849f7[] = {0};
static const uint16_t i_ca831843acf849f7[] = {0};
const ::capnp::_::RawSchema s_ca831843acf849f7 = {
  0xca831843acf849f7, b_ca831843acf849f7.words, 34, d_ca831843acf849f7, m_ca831843acf849f7,
  1, 1, i_ca831843acf849f7, nullptr, nullptr, { &s_ca831843acf849f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fd9f5e3214c0b9da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218, 185, 192,  20,  50,  94, 159, 253,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 115, 101, 116, 120,
     97, 116, 116, 114,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    127,  53, 199,   7,  84, 107, 127, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd9f5e3214c0b9da = b_fd9f5e3214c0b9da.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd9f5e3214c0b9da[] = {
  &s_ac7f6b5407c7357f,
};
static const uint16_t m_fd9f5e3214c0b9da[] = {0};
static const uint16_t i_fd9f5e3214c0b9da[] = {0};
const ::capnp::_::RawSchema s_fd9f5e3214c0b9da = {
  0xfd9f5e3214c0b9da, b_fd9f5e3214c0b9da.words, 34, d_fd9f5e3214c0b9da, m_fd9f5e3214c0b9da,
  1, 1, i_fd9f5e3214c0b9da, nullptr, nullptr, { &s_fd9f5e3214c0b9da, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9a6167b3e5a7ae33 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51, 174, 167, 229, 179, 103,  97, 154,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46,  99, 114, 101,  97,
    116, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     91, 163, 202,  97, 117,  12, 202, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9a6167b3e5a7ae33 = b_9a6167b3e5a7ae33.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9a6167b3e5a7ae33[] = {
  &s_dcca0c7561caa35b,
};
static const uint16_t m_9a6167b3e5a7ae33[] = {0};
static const uint16_t i_9a6167b3e5a7ae33[] = {0};
const ::capnp::_::RawSchema s_9a6167b3e5a7ae33 = {
  0x9a6167b3e5a7ae33, b_9a6167b3e5a7ae33.words, 34, d_9a6167b3e5a7ae33, m_9a6167b3e5a7ae33,
  1, 1, i_9a6167b3e5a7ae33, nullptr, nullptr, { &s_9a6167b3e5a7ae33, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_acc7602ba05907b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180,   7,  89, 160,  43,  96, 199, 172,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46,  99, 114, 101,  97,
    116, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     63,  99, 235, 204, 196, 200, 204, 130,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_acc7602ba05907b4 = b_acc7602ba05907b4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_acc7602ba05907b4[] = {
  &s_82ccc8c4cceb633f,
};
static const uint16_t m_acc7602ba05907b4[] = {0};
static const uint16_t i_acc7602ba05907b4[] = {0};
const ::capnp::_::RawSchema s_acc7602ba05907b4 = {
  0xacc7602ba05907b4, b_acc7602ba05907b4.words, 34, d_acc7602ba05907b4, m_acc7602ba05907b4,
  1, 1, i_acc7602ba05907b4, nullptr, nullptr, { &s_acc7602ba05907b4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_babdde0100316f15 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 111,  49,   0,   1, 222, 189, 186,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 102, 108, 117, 115,
    104,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    152,  41, 214,  86,  35,  64, 101, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_babdde0100316f15 = b_babdde0100316f15.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_babdde0100316f15[] = {
  &s_e865402356d62998,
};
static const uint16_t m_babdde0100316f15[] = {0};
static const uint16_t i_babdde0100316f15[] = {0};
const ::capnp::_::RawSchema s_babdde0100316f15 = {
  0xbabdde0100316f15, b_babdde0100316f15.words, 34, d_babdde0100316f15, m_babdde0100316f15,
  1, 1, i_babdde0100316f15, nullptr, nullptr, { &s_babdde0100316f15, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_eddbc042b004e967 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    103, 233,   4, 176,  66, 192, 219, 237,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 102, 108, 117, 115,
    104,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    194,  43,  21, 253,  83,  45, 178, 173,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eddbc042b004e967 = b_eddbc042b004e967.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eddbc042b004e967[] = {
  &s_adb22d53fd152bc2,
};
static const uint16_t m_eddbc042b004e967[] = {0};
static const uint16_t i_eddbc042b004e967[] = {0};
const ::capnp::_::RawSchema s_eddbc042b004e967 = {
  0xeddbc042b004e967, b_eddbc042b004e967.words, 34, d_eddbc042b004e967, m_eddbc042b004e967,
  1, 1, i_eddbc042b004e967, nullptr, nullptr, { &s_eddbc042b004e967, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f4dd4d09dc83ec7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 236, 131, 220,   9,  77, 221, 244,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 102, 115, 121, 110,
     99,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    107, 161, 190, 215, 231, 133, 116, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f4dd4d09dc83ec7f = b_f4dd4d09dc83ec7f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f4dd4d09dc83ec7f[] = {
  &s_d47485e7d7bea16b,
};
static const uint16_t m_f4dd4d09dc83ec7f[] = {0};
static const uint16_t i_f4dd4d09dc83ec7f[] = {0};
const ::capnp::_::RawSchema s_f4dd4d09dc83ec7f = {
  0xf4dd4d09dc83ec7f, b_f4dd4d09dc83ec7f.words, 34, d_f4dd4d09dc83ec7f, m_f4dd4d09dc83ec7f,
  1, 1, i_f4dd4d09dc83ec7f, nullptr, nullptr, { &s_f4dd4d09dc83ec7f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f4f333b1e0561ee6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  30,  86, 224, 177,  51, 243, 244,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46, 102, 115, 121, 110,
     99,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    130,  13, 166,  27,  67, 238, 100, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f4f333b1e0561ee6 = b_f4f333b1e0561ee6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f4f333b1e0561ee6[] = {
  &s_c764ee431ba60d82,
};
static const uint16_t m_f4f333b1e0561ee6[] = {0};
static const uint16_t i_f4f333b1e0561ee6[] = {0};
const ::capnp::_::RawSchema s_f4f333b1e0561ee6 = {
  0xf4f333b1e0561ee6, b_f4f333b1e0561ee6.words, 34, d_f4f333b1e0561ee6, m_f4f333b1e0561ee6,
  1, 1, i_f4f333b1e0561ee6, nullptr, nullptr, { &s_f4f333b1e0561ee6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_8d87ef4484192bf7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  43,  25, 132,  68, 239, 135, 141,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46,  98, 117, 108, 107,
     87, 114, 105, 116, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 113,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 117,  12, 146, 248, 131,  24, 147,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d87ef4484192bf7 = b_8d87ef4484192bf7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d87ef4484192bf7[] = {
  &s_931883f8920c7515,
};
static const uint16_t m_8d87ef4484192bf7[] = {0};
static const uint16_t i_8d87ef4484192bf7[] = {0};
const ::capnp::_::RawSchema s_8d87ef4484192bf7 = {
  0x8d87ef4484192bf7, b_8d87ef4484192bf7.words, 38, d_8d87ef4484192bf7, m_8d87ef4484192bf7,
  1, 1, i_8d87ef4484192bf7, nullptr, nullptr, { &s_8d87ef4484192bf7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_c5a51725bca345c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196,  69, 163, 188,  37,  23, 165, 197,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 112, 110, 112,  47, 103, 104,
    111, 115, 116, 102, 115,  46,  99,  97,
    112, 110, 112,  58,  71, 104, 111, 115,
    116,  70,  83,  46,  98, 117, 108, 107,
     87, 114, 105, 116, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     36,  86, 228, 109, 250,   9, 121, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5a51725bca345c4 = b_c5a51725bca345c4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c5a51725bca345c4[] = {
  &s_ec7909fa6de45624,
};
static const uint16_t m_c5a51725bca345c4[] = {0};
static const uint16_t i_c5a51725bca345c4[] = {0};
const ::capnp::_::RawSchema s_c5a51725bca345c4 = {
  0xc5a51725bca345c4, b_c5a51725bca345c4.words, 38, d_c5a51725bca345c4, m_c5a51725bca345c4,
  1, 1, i_c5a51725bca345c4, nullptr, nullptr, { &s_c5a51725bca345c4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::GhostFSAuthServer::AuthorizeParams,  ::GhostFSAuthServer::AuthorizeResults>
GhostFSAuthServer::Client::authorizeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFSAuthServer::AuthorizeParams,  ::GhostFSAuthServer::AuthorizeResults>(
      0x95a8f5ede3b691d4ull, 0, sizeHint);
}
::kj::Promise<void> GhostFSAuthServer::Server::authorize(AuthorizeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFSAuthServer", "authorize",
      0x95a8f5ede3b691d4ull, 0);
}
::capnp::Request< ::GhostFSAuthServer::MountParams,  ::GhostFSAuthServer::MountResults>
GhostFSAuthServer::Client::mountRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFSAuthServer::MountParams,  ::GhostFSAuthServer::MountResults>(
      0x95a8f5ede3b691d4ull, 1, sizeHint);
}
::kj::Promise<void> GhostFSAuthServer::Server::mount(MountContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFSAuthServer", "mount",
      0x95a8f5ede3b691d4ull, 1);
}
::capnp::Request< ::GhostFSAuthServer::UnmountParams,  ::GhostFSAuthServer::UnmountResults>
GhostFSAuthServer::Client::unmountRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFSAuthServer::UnmountParams,  ::GhostFSAuthServer::UnmountResults>(
      0x95a8f5ede3b691d4ull, 2, sizeHint);
}
::kj::Promise<void> GhostFSAuthServer::Server::unmount(UnmountContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFSAuthServer", "unmount",
      0x95a8f5ede3b691d4ull, 2);
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuthServer::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x95a8f5ede3b691d4ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/ghostfs.capnp:GhostFSAuthServer", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuthServer::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        authorize(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFSAuthServer::AuthorizeParams,  ::GhostFSAuthServer::AuthorizeResults>(context)),
        false
      };
    case 1:
      return {
        mount(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFSAuthServer::MountParams,  ::GhostFSAuthServer::MountResults>(context)),
        false
      };
    case 2:
      return {
        unmount(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFSAuthServer::UnmountParams,  ::GhostFSAuthServer::UnmountResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/ghostfs.capnp:GhostFSAuthServer",
          0x95a8f5ede3b691d4ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFSAuthServer
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::AuthorizeParams
constexpr uint16_t GhostFSAuthServer::AuthorizeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::AuthorizeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::AuthorizeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::AuthorizeParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::AuthorizeResults
constexpr uint16_t GhostFSAuthServer::AuthorizeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::AuthorizeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::AuthorizeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::AuthorizeResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::MountParams
constexpr uint16_t GhostFSAuthServer::MountParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::MountParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::MountParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::MountParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::MountResults
constexpr uint16_t GhostFSAuthServer::MountResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::MountResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::MountResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::MountResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::UnmountParams
constexpr uint16_t GhostFSAuthServer::UnmountParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::UnmountParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::UnmountParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::UnmountParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuthServer::UnmountResults
constexpr uint16_t GhostFSAuthServer::UnmountResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuthServer::UnmountResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuthServer::UnmountResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuthServer::UnmountResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>
GhostFSAuth::Client::authRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>(
      0xb7e9256c41304f3cull, 0, sizeHint);
}
::kj::Promise<void> GhostFSAuth::Server::auth(AuthContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFSAuth", "auth",
      0xb7e9256c41304f3cull, 0);
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuth::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb7e9256c41304f3cull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/ghostfs.capnp:GhostFSAuth", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFSAuth::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        auth(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/ghostfs.capnp:GhostFSAuth",
          0xb7e9256c41304f3cull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFSAuth
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuth::AuthParams
constexpr uint16_t GhostFSAuth::AuthParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuth::AuthParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::AuthParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::AuthParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFSAuth::AuthResults
constexpr uint16_t GhostFSAuth::AuthResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFSAuth::AuthResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFSAuth::AuthResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFSAuth::AuthResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::GhostFS::LookupParams,  ::GhostFS::LookupResults>
GhostFS::Client::lookupRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::LookupParams,  ::GhostFS::LookupResults>(
      0x9fc6d7895c294dc9ull, 0, sizeHint);
}
::kj::Promise<void> GhostFS::Server::lookup(LookupContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "lookup",
      0x9fc6d7895c294dc9ull, 0);
}
::capnp::Request< ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>
GhostFS::Client::getattrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>(
      0x9fc6d7895c294dc9ull, 1, sizeHint);
}
::kj::Promise<void> GhostFS::Server::getattr(GetattrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "getattr",
      0x9fc6d7895c294dc9ull, 1);
}
::capnp::Request< ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>
GhostFS::Client::setattrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>(
      0x9fc6d7895c294dc9ull, 2, sizeHint);
}
::kj::Promise<void> GhostFS::Server::setattr(SetattrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "setattr",
      0x9fc6d7895c294dc9ull, 2);
}
::capnp::Request< ::GhostFS::MknodParams,  ::GhostFS::MknodResults>
GhostFS::Client::mknodRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::MknodParams,  ::GhostFS::MknodResults>(
      0x9fc6d7895c294dc9ull, 3, sizeHint);
}
::kj::Promise<void> GhostFS::Server::mknod(MknodContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "mknod",
      0x9fc6d7895c294dc9ull, 3);
}
::capnp::Request< ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>
GhostFS::Client::mkdirRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>(
      0x9fc6d7895c294dc9ull, 4, sizeHint);
}
::kj::Promise<void> GhostFS::Server::mkdir(MkdirContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "mkdir",
      0x9fc6d7895c294dc9ull, 4);
}
::capnp::Request< ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>
GhostFS::Client::unlinkRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>(
      0x9fc6d7895c294dc9ull, 5, sizeHint);
}
::kj::Promise<void> GhostFS::Server::unlink(UnlinkContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "unlink",
      0x9fc6d7895c294dc9ull, 5);
}
::capnp::Request< ::GhostFS::RmdirParams,  ::GhostFS::RmdirResults>
GhostFS::Client::rmdirRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::RmdirParams,  ::GhostFS::RmdirResults>(
      0x9fc6d7895c294dc9ull, 6, sizeHint);
}
::kj::Promise<void> GhostFS::Server::rmdir(RmdirContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "rmdir",
      0x9fc6d7895c294dc9ull, 6);
}
::capnp::Request< ::GhostFS::RenameParams,  ::GhostFS::RenameResults>
GhostFS::Client::renameRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::RenameParams,  ::GhostFS::RenameResults>(
      0x9fc6d7895c294dc9ull, 7, sizeHint);
}
::kj::Promise<void> GhostFS::Server::rename(RenameContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "rename",
      0x9fc6d7895c294dc9ull, 7);
}
::capnp::Request< ::GhostFS::OpenParams,  ::GhostFS::OpenResults>
GhostFS::Client::openRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::OpenParams,  ::GhostFS::OpenResults>(
      0x9fc6d7895c294dc9ull, 8, sizeHint);
}
::kj::Promise<void> GhostFS::Server::open(OpenContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "open",
      0x9fc6d7895c294dc9ull, 8);
}
::capnp::Request< ::GhostFS::ReadParams,  ::GhostFS::ReadResults>
GhostFS::Client::readRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::ReadParams,  ::GhostFS::ReadResults>(
      0x9fc6d7895c294dc9ull, 9, sizeHint);
}
::kj::Promise<void> GhostFS::Server::read(ReadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "read",
      0x9fc6d7895c294dc9ull, 9);
}
::capnp::Request< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>
GhostFS::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(
      0x9fc6d7895c294dc9ull, 10, sizeHint);
}
::kj::Promise<void> GhostFS::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "write",
      0x9fc6d7895c294dc9ull, 10);
}
::capnp::Request< ::GhostFS::ReleaseParams,  ::GhostFS::ReleaseResults>
GhostFS::Client::releaseRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::ReleaseParams,  ::GhostFS::ReleaseResults>(
      0x9fc6d7895c294dc9ull, 11, sizeHint);
}
::kj::Promise<void> GhostFS::Server::release(ReleaseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "release",
      0x9fc6d7895c294dc9ull, 11);
}
::capnp::Request< ::GhostFS::ReaddirParams,  ::GhostFS::ReaddirResults>
GhostFS::Client::readdirRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::ReaddirParams,  ::GhostFS::ReaddirResults>(
      0x9fc6d7895c294dc9ull, 12, sizeHint);
}
::kj::Promise<void> GhostFS::Server::readdir(ReaddirContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "readdir",
      0x9fc6d7895c294dc9ull, 12);
}
::capnp::Request< ::GhostFS::SetxattrParams,  ::GhostFS::SetxattrResults>
GhostFS::Client::setxattrRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::SetxattrParams,  ::GhostFS::SetxattrResults>(
      0x9fc6d7895c294dc9ull, 13, sizeHint);
}
::kj::Promise<void> GhostFS::Server::setxattr(SetxattrContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "setxattr",
      0x9fc6d7895c294dc9ull, 13);
}
::capnp::Request< ::GhostFS::CreateParams,  ::GhostFS::CreateResults>
GhostFS::Client::createRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::CreateParams,  ::GhostFS::CreateResults>(
      0x9fc6d7895c294dc9ull, 14, sizeHint);
}
::kj::Promise<void> GhostFS::Server::create(CreateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "create",
      0x9fc6d7895c294dc9ull, 14);
}
::capnp::Request< ::GhostFS::FlushParams,  ::GhostFS::FlushResults>
GhostFS::Client::flushRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::FlushParams,  ::GhostFS::FlushResults>(
      0x9fc6d7895c294dc9ull, 15, sizeHint);
}
::kj::Promise<void> GhostFS::Server::flush(FlushContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "flush",
      0x9fc6d7895c294dc9ull, 15);
}
::capnp::Request< ::GhostFS::FsyncParams,  ::GhostFS::FsyncResults>
GhostFS::Client::fsyncRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::FsyncParams,  ::GhostFS::FsyncResults>(
      0x9fc6d7895c294dc9ull, 16, sizeHint);
}
::kj::Promise<void> GhostFS::Server::fsync(FsyncContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "fsync",
      0x9fc6d7895c294dc9ull, 16);
}
::capnp::Request< ::GhostFS::BulkWriteParams,  ::GhostFS::BulkWriteResults>
GhostFS::Client::bulkWriteRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::GhostFS::BulkWriteParams,  ::GhostFS::BulkWriteResults>(
      0x9fc6d7895c294dc9ull, 17, sizeHint);
}
::kj::Promise<void> GhostFS::Server::bulkWrite(BulkWriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "capnp/ghostfs.capnp:GhostFS", "bulkWrite",
      0x9fc6d7895c294dc9ull, 17);
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9fc6d7895c294dc9ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("capnp/ghostfs.capnp:GhostFS", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult GhostFS::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        lookup(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::LookupParams,  ::GhostFS::LookupResults>(context)),
        false
      };
    case 1:
      return {
        getattr(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults>(context)),
        false
      };
    case 2:
      return {
        setattr(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults>(context)),
        false
      };
    case 3:
      return {
        mknod(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::MknodParams,  ::GhostFS::MknodResults>(context)),
        false
      };
    case 4:
      return {
        mkdir(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults>(context)),
        false
      };
    case 5:
      return {
        unlink(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults>(context)),
        false
      };
    case 6:
      return {
        rmdir(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::RmdirParams,  ::GhostFS::RmdirResults>(context)),
        false
      };
    case 7:
      return {
        rename(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::RenameParams,  ::GhostFS::RenameResults>(context)),
        false
      };
    case 8:
      return {
        open(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::OpenParams,  ::GhostFS::OpenResults>(context)),
        false
      };
    case 9:
      return {
        read(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::ReadParams,  ::GhostFS::ReadResults>(context)),
        false
      };
    case 10:
      return {
        write(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::WriteParams,  ::GhostFS::WriteResults>(context)),
        false
      };
    case 11:
      return {
        release(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::ReleaseParams,  ::GhostFS::ReleaseResults>(context)),
        false
      };
    case 12:
      return {
        readdir(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::ReaddirParams,  ::GhostFS::ReaddirResults>(context)),
        false
      };
    case 13:
      return {
        setxattr(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::SetxattrParams,  ::GhostFS::SetxattrResults>(context)),
        false
      };
    case 14:
      return {
        create(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::CreateParams,  ::GhostFS::CreateResults>(context)),
        false
      };
    case 15:
      return {
        flush(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::FlushParams,  ::GhostFS::FlushResults>(context)),
        false
      };
    case 16:
      return {
        fsync(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::FsyncParams,  ::GhostFS::FsyncResults>(context)),
        false
      };
    case 17:
      return {
        bulkWrite(::capnp::Capability::Server::internalGetTypedContext<
             ::GhostFS::BulkWriteParams,  ::GhostFS::BulkWriteResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "capnp/ghostfs.capnp:GhostFS",
          0x9fc6d7895c294dc9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// GhostFS
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::LookupParams
constexpr uint16_t GhostFS::LookupParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::LookupParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::LookupParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::LookupParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::LookupResults
constexpr uint16_t GhostFS::LookupResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::LookupResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::LookupResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::LookupResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::GetattrParams
constexpr uint16_t GhostFS::GetattrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::GetattrParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::GetattrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::GetattrParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::GetattrResults
constexpr uint16_t GhostFS::GetattrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::GetattrResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::GetattrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::GetattrResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetattrParams
constexpr uint16_t GhostFS::SetattrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetattrParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetattrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetattrParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetattrResults
constexpr uint16_t GhostFS::SetattrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetattrResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetattrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetattrResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MknodParams
constexpr uint16_t GhostFS::MknodParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MknodParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MknodParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MknodParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MknodResults
constexpr uint16_t GhostFS::MknodResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MknodResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MknodResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MknodResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MkdirParams
constexpr uint16_t GhostFS::MkdirParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MkdirParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MkdirParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MkdirParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::MkdirResults
constexpr uint16_t GhostFS::MkdirResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::MkdirResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::MkdirResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::MkdirResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::UnlinkParams
constexpr uint16_t GhostFS::UnlinkParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::UnlinkParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::UnlinkParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::UnlinkParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::UnlinkResults
constexpr uint16_t GhostFS::UnlinkResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::UnlinkResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::UnlinkResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::UnlinkResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::RmdirParams
constexpr uint16_t GhostFS::RmdirParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::RmdirParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::RmdirParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::RmdirParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::RmdirResults
constexpr uint16_t GhostFS::RmdirResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::RmdirResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::RmdirResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::RmdirResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::RenameParams
constexpr uint16_t GhostFS::RenameParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::RenameParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::RenameParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::RenameParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::RenameResults
constexpr uint16_t GhostFS::RenameResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::RenameResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::RenameResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::RenameResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::OpenParams
constexpr uint16_t GhostFS::OpenParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::OpenParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::OpenParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::OpenParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::OpenResults
constexpr uint16_t GhostFS::OpenResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::OpenResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::OpenResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::OpenResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReadParams
constexpr uint16_t GhostFS::ReadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReadParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReadParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReadResults
constexpr uint16_t GhostFS::ReadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReadResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReadResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteParams
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::WriteResults
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::WriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::WriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::WriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReleaseParams
constexpr uint16_t GhostFS::ReleaseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReleaseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReleaseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReleaseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReleaseResults
constexpr uint16_t GhostFS::ReleaseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReleaseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReleaseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReleaseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReaddirParams
constexpr uint16_t GhostFS::ReaddirParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReaddirParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReaddirParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReaddirParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::ReaddirResults
constexpr uint16_t GhostFS::ReaddirResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::ReaddirResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::ReaddirResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::ReaddirResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetxattrParams
constexpr uint16_t GhostFS::SetxattrParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetxattrParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetxattrParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetxattrParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::SetxattrResults
constexpr uint16_t GhostFS::SetxattrResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::SetxattrResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::SetxattrResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::SetxattrResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::CreateParams
constexpr uint16_t GhostFS::CreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::CreateParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::CreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::CreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::CreateResults
constexpr uint16_t GhostFS::CreateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::CreateResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::CreateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::CreateResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::FlushParams
constexpr uint16_t GhostFS::FlushParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::FlushParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::FlushParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::FlushParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::FlushResults
constexpr uint16_t GhostFS::FlushResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::FlushResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::FlushResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::FlushResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::FsyncParams
constexpr uint16_t GhostFS::FsyncParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::FsyncParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::FsyncParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::FsyncParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::FsyncResults
constexpr uint16_t GhostFS::FsyncResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::FsyncResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::FsyncResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::FsyncResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::BulkWriteParams
constexpr uint16_t GhostFS::BulkWriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::BulkWriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::BulkWriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::BulkWriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// GhostFS::BulkWriteResults
constexpr uint16_t GhostFS::BulkWriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t GhostFS::BulkWriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind GhostFS::BulkWriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* GhostFS::BulkWriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE




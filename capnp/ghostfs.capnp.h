// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ghostfs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "access.capnp.h"
#include "access.response.capnp.h"
#include "create.capnp.h"
#include "create.response.capnp.h"
#include "flush.capnp.h"
#include "flush.response.capnp.h"
#include "fsync.capnp.h"
#include "fsync.response.capnp.h"
#include "getattr.capnp.h"
#include "getattr.response.capnp.h"
#include "lookup.capnp.h"
#include "lookup.response.capnp.h"
#include "mkdir.capnp.h"
#include "mkdir.response.capnp.h"
#include "mknod.capnp.h"
#include "mknod.response.capnp.h"
#include "open.capnp.h"
#include "open.response.capnp.h"
#include "read.capnp.h"
#include "read.response.capnp.h"
#include "readdir.capnp.h"
#include "readdir.response.capnp.h"
#include "readlink.capnp.h"
#include "readlink.response.capnp.h"
#include "release.capnp.h"
#include "release.response.capnp.h"
#include "rename.capnp.h"
#include "rename.response.capnp.h"
#include "rmdir.capnp.h"
#include "rmdir.response.capnp.h"
#include "setattr.capnp.h"
#include "setattr.response.capnp.h"
#include "setxattr.capnp.h"
#include "setxattr.response.capnp.h"
#include "symlink.capnp.h"
#include "symlink.response.capnp.h"
#include "unlink.capnp.h"
#include "unlink.response.capnp.h"
#include "write.capnp.h"
#include "write.response.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(95a8f5ede3b691d4);
CAPNP_DECLARE_SCHEMA(e7fca01f0854d3a2);
CAPNP_DECLARE_SCHEMA(ead688e314f47909);
CAPNP_DECLARE_SCHEMA(af0b67287d7dbc39);
CAPNP_DECLARE_SCHEMA(aa991a7f07e4a9e2);
CAPNP_DECLARE_SCHEMA(df599148f0bc809a);
CAPNP_DECLARE_SCHEMA(d7ad9d3d2ba0e138);
CAPNP_DECLARE_SCHEMA(809adba49049e9e8);
CAPNP_DECLARE_SCHEMA(cb27849573d2f5c5);
CAPNP_DECLARE_SCHEMA(dd1068309eafd8af);
CAPNP_DECLARE_SCHEMA(f794d97645c99578);
CAPNP_DECLARE_SCHEMA(b7e9256c41304f3c);
CAPNP_DECLARE_SCHEMA(9e07e383bd464b04);
CAPNP_DECLARE_SCHEMA(c6f18d208cd0cd46);
CAPNP_DECLARE_SCHEMA(9fc6d7895c294dc9);
CAPNP_DECLARE_SCHEMA(b0836f411d2abe3b);
CAPNP_DECLARE_SCHEMA(a8501684a32d6de9);
CAPNP_DECLARE_SCHEMA(bb20fe0f54844336);
CAPNP_DECLARE_SCHEMA(84f35b28cd3bb0d9);
CAPNP_DECLARE_SCHEMA(ff558ed77573e67f);
CAPNP_DECLARE_SCHEMA(e3e30b919a295685);
CAPNP_DECLARE_SCHEMA(ea36665fcfea5c3d);
CAPNP_DECLARE_SCHEMA(dbec0e28e62d98f5);
CAPNP_DECLARE_SCHEMA(d00785fcfdcb2ecc);
CAPNP_DECLARE_SCHEMA(e77df49b4aa2c163);
CAPNP_DECLARE_SCHEMA(951ace36ee953148);
CAPNP_DECLARE_SCHEMA(e31fbb31fdad1f22);
CAPNP_DECLARE_SCHEMA(cde0b07a2572b36d);
CAPNP_DECLARE_SCHEMA(c009e93b9bb4516f);
CAPNP_DECLARE_SCHEMA(edf4e9dedbe2f82b);
CAPNP_DECLARE_SCHEMA(de8fa1f07e074612);
CAPNP_DECLARE_SCHEMA(ea909f865c57200f);
CAPNP_DECLARE_SCHEMA(a49769577e97ea80);
CAPNP_DECLARE_SCHEMA(e8df6f597cb4d47e);
CAPNP_DECLARE_SCHEMA(b4465ae88f2787ef);
CAPNP_DECLARE_SCHEMA(87b05446a9f38ce6);
CAPNP_DECLARE_SCHEMA(da1d34ae44e78453);
CAPNP_DECLARE_SCHEMA(953c9e43142cd11b);
CAPNP_DECLARE_SCHEMA(f1b5b75fce19a386);
CAPNP_DECLARE_SCHEMA(f7a52d27fca0764a);
CAPNP_DECLARE_SCHEMA(da8ec8fab761d994);
CAPNP_DECLARE_SCHEMA(ca831843acf849f7);
CAPNP_DECLARE_SCHEMA(fd9f5e3214c0b9da);
CAPNP_DECLARE_SCHEMA(9a6167b3e5a7ae33);
CAPNP_DECLARE_SCHEMA(acc7602ba05907b4);
CAPNP_DECLARE_SCHEMA(babdde0100316f15);
CAPNP_DECLARE_SCHEMA(eddbc042b004e967);
CAPNP_DECLARE_SCHEMA(f4dd4d09dc83ec7f);
CAPNP_DECLARE_SCHEMA(f4f333b1e0561ee6);
CAPNP_DECLARE_SCHEMA(8d87ef4484192bf7);
CAPNP_DECLARE_SCHEMA(c5a51725bca345c4);
CAPNP_DECLARE_SCHEMA(e1029c64df716bf6);
CAPNP_DECLARE_SCHEMA(d35f2ca1c38f8308);
CAPNP_DECLARE_SCHEMA(ccc9596da27864a4);
CAPNP_DECLARE_SCHEMA(cda952998305cbd8);
CAPNP_DECLARE_SCHEMA(f7ae135839e59663);
CAPNP_DECLARE_SCHEMA(9692a24c11fa4f46);

}  // namespace schemas
}  // namespace capnp


struct GhostFSAuthServer {
  GhostFSAuthServer() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct AuthorizeParams;
  struct AuthorizeResults;
  struct MountParams;
  struct MountResults;
  struct MountsParams;
  struct MountsResults;
  struct UnmountParams;
  struct UnmountResults;
  struct UnmountAllParams;
  struct UnmountAllResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(95a8f5ede3b691d4)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct GhostFSAuthServer::AuthorizeParams {
  AuthorizeParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7fca01f0854d3a2, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::AuthorizeResults {
  AuthorizeResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ead688e314f47909, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::MountParams {
  MountParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af0b67287d7dbc39, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::MountResults {
  MountResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa991a7f07e4a9e2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::MountsParams {
  MountsParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(df599148f0bc809a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::MountsResults {
  MountsResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d7ad9d3d2ba0e138, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::UnmountParams {
  UnmountParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(809adba49049e9e8, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::UnmountResults {
  UnmountResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb27849573d2f5c5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::UnmountAllParams {
  UnmountAllParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dd1068309eafd8af, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuthServer::UnmountAllResults {
  UnmountAllResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f794d97645c99578, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuth {
  GhostFSAuth() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct AuthParams;
  struct AuthResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b7e9256c41304f3c)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct GhostFSAuth::AuthParams {
  AuthParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e07e383bd464b04, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuth::AuthResults {
  AuthResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6f18d208cd0cd46, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS {
  GhostFS() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct LookupParams;
  struct LookupResults;
  struct GetattrParams;
  struct GetattrResults;
  struct SetattrParams;
  struct SetattrResults;
  struct ReadlinkParams;
  struct ReadlinkResults;
  struct MknodParams;
  struct MknodResults;
  struct MkdirParams;
  struct MkdirResults;
  struct UnlinkParams;
  struct UnlinkResults;
  struct RmdirParams;
  struct RmdirResults;
  struct SymlinkParams;
  struct SymlinkResults;
  struct RenameParams;
  struct RenameResults;
  struct OpenParams;
  struct OpenResults;
  struct ReadParams;
  struct ReadResults;
  struct WriteParams;
  struct WriteResults;
  struct ReleaseParams;
  struct ReleaseResults;
  struct ReaddirParams;
  struct ReaddirResults;
  struct SetxattrParams;
  struct SetxattrResults;
  struct AccessParams;
  struct AccessResults;
  struct CreateParams;
  struct CreateResults;
  struct FlushParams;
  struct FlushResults;
  struct FsyncParams;
  struct FsyncResults;
  struct BulkWriteParams;
  struct BulkWriteResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(9fc6d7895c294dc9)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct GhostFS::LookupParams {
  LookupParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0836f411d2abe3b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::LookupResults {
  LookupResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8501684a32d6de9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::GetattrParams {
  GetattrParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb20fe0f54844336, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::GetattrResults {
  GetattrResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84f35b28cd3bb0d9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SetattrParams {
  SetattrParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff558ed77573e67f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SetattrResults {
  SetattrResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e3e30b919a295685, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadlinkParams {
  ReadlinkParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea36665fcfea5c3d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadlinkResults {
  ReadlinkResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbec0e28e62d98f5, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::MknodParams {
  MknodParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d00785fcfdcb2ecc, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::MknodResults {
  MknodResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e77df49b4aa2c163, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::MkdirParams {
  MkdirParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(951ace36ee953148, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::MkdirResults {
  MkdirResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e31fbb31fdad1f22, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::UnlinkParams {
  UnlinkParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cde0b07a2572b36d, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::UnlinkResults {
  UnlinkResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c009e93b9bb4516f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::RmdirParams {
  RmdirParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(edf4e9dedbe2f82b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::RmdirResults {
  RmdirResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de8fa1f07e074612, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SymlinkParams {
  SymlinkParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea909f865c57200f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SymlinkResults {
  SymlinkResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a49769577e97ea80, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::RenameParams {
  RenameParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8df6f597cb4d47e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::RenameResults {
  RenameResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4465ae88f2787ef, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::OpenParams {
  OpenParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87b05446a9f38ce6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::OpenResults {
  OpenResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da1d34ae44e78453, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadParams {
  ReadParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(953c9e43142cd11b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadResults {
  ReadResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1b5b75fce19a386, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::WriteParams {
  WriteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7a52d27fca0764a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::WriteResults {
  WriteResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da8ec8fab761d994, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReleaseParams {
  ReleaseParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca831843acf849f7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReleaseResults {
  ReleaseResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd9f5e3214c0b9da, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReaddirParams {
  ReaddirParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9a6167b3e5a7ae33, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReaddirResults {
  ReaddirResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(acc7602ba05907b4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SetxattrParams {
  SetxattrParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(babdde0100316f15, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::SetxattrResults {
  SetxattrResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eddbc042b004e967, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::AccessParams {
  AccessParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4dd4d09dc83ec7f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::AccessResults {
  AccessResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f4f333b1e0561ee6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::CreateParams {
  CreateParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d87ef4484192bf7, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::CreateResults {
  CreateResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5a51725bca345c4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::FlushParams {
  FlushParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e1029c64df716bf6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::FlushResults {
  FlushResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d35f2ca1c38f8308, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::FsyncParams {
  FsyncParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccc9596da27864a4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::FsyncResults {
  FsyncResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cda952998305cbd8, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::BulkWriteParams {
  BulkWriteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7ae135839e59663, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::BulkWriteResults {
  BulkWriteResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9692a24c11fa4f46, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class GhostFSAuthServer::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef GhostFSAuthServer Calls;
  typedef GhostFSAuthServer Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::GhostFSAuthServer::AuthorizeParams,  ::GhostFSAuthServer::AuthorizeResults> authorizeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFSAuthServer::MountParams,  ::GhostFSAuthServer::MountResults> mountRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFSAuthServer::MountsParams,  ::GhostFSAuthServer::MountsResults> mountsRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFSAuthServer::UnmountParams,  ::GhostFSAuthServer::UnmountResults> unmountRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFSAuthServer::UnmountAllParams,  ::GhostFSAuthServer::UnmountAllResults> unmountAllRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class GhostFSAuthServer::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef GhostFSAuthServer Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::GhostFSAuthServer::AuthorizeParams AuthorizeParams;
  typedef  ::GhostFSAuthServer::AuthorizeResults AuthorizeResults;
  typedef ::capnp::CallContext<AuthorizeParams, AuthorizeResults> AuthorizeContext;
  virtual ::kj::Promise<void> authorize(AuthorizeContext context);
  typedef  ::GhostFSAuthServer::MountParams MountParams;
  typedef  ::GhostFSAuthServer::MountResults MountResults;
  typedef ::capnp::CallContext<MountParams, MountResults> MountContext;
  virtual ::kj::Promise<void> mount(MountContext context);
  typedef  ::GhostFSAuthServer::MountsParams MountsParams;
  typedef  ::GhostFSAuthServer::MountsResults MountsResults;
  typedef ::capnp::CallContext<MountsParams, MountsResults> MountsContext;
  virtual ::kj::Promise<void> mounts(MountsContext context);
  typedef  ::GhostFSAuthServer::UnmountParams UnmountParams;
  typedef  ::GhostFSAuthServer::UnmountResults UnmountResults;
  typedef ::capnp::CallContext<UnmountParams, UnmountResults> UnmountContext;
  virtual ::kj::Promise<void> unmount(UnmountContext context);
  typedef  ::GhostFSAuthServer::UnmountAllParams UnmountAllParams;
  typedef  ::GhostFSAuthServer::UnmountAllResults UnmountAllResults;
  typedef ::capnp::CallContext<UnmountAllParams, UnmountAllResults> UnmountAllContext;
  virtual ::kj::Promise<void> unmountAll(UnmountAllContext context);

  inline  ::GhostFSAuthServer::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::GhostFSAuthServer>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::AuthorizeParams::Reader {
public:
  typedef AuthorizeParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline  ::int64_t getRetries() const;

  inline  ::uint64_t getExpires() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::AuthorizeParams::Builder {
public:
  typedef AuthorizeParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline  ::int64_t getRetries();
  inline void setRetries( ::int64_t value);

  inline  ::uint64_t getExpires();
  inline void setExpires( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::AuthorizeParams::Pipeline {
public:
  typedef AuthorizeParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::AuthorizeResults::Reader {
public:
  typedef AuthorizeResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::AuthorizeResults::Builder {
public:
  typedef AuthorizeResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::AuthorizeResults::Pipeline {
public:
  typedef AuthorizeResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::MountParams::Reader {
public:
  typedef MountParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasSource() const;
  inline  ::capnp::Text::Reader getSource() const;

  inline bool hasDestination() const;
  inline  ::capnp::Text::Reader getDestination() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::MountParams::Builder {
public:
  typedef MountParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasSource();
  inline  ::capnp::Text::Builder getSource();
  inline void setSource( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSource(unsigned int size);
  inline void adoptSource(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSource();

  inline bool hasDestination();
  inline  ::capnp::Text::Builder getDestination();
  inline void setDestination( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDestination(unsigned int size);
  inline void adoptDestination(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDestination();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::MountParams::Pipeline {
public:
  typedef MountParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::MountResults::Reader {
public:
  typedef MountResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::MountResults::Builder {
public:
  typedef MountResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::MountResults::Pipeline {
public:
  typedef MountResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::MountsParams::Reader {
public:
  typedef MountsParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::MountsParams::Builder {
public:
  typedef MountsParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::MountsParams::Pipeline {
public:
  typedef MountsParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::MountsResults::Reader {
public:
  typedef MountsResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMounts() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getMounts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::MountsResults::Builder {
public:
  typedef MountsResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMounts();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getMounts();
  inline void setMounts( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setMounts(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initMounts(unsigned int size);
  inline void adoptMounts(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownMounts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::MountsResults::Pipeline {
public:
  typedef MountsResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::UnmountParams::Reader {
public:
  typedef UnmountParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasDestination() const;
  inline  ::capnp::Text::Reader getDestination() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::UnmountParams::Builder {
public:
  typedef UnmountParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasDestination();
  inline  ::capnp::Text::Builder getDestination();
  inline void setDestination( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDestination(unsigned int size);
  inline void adoptDestination(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDestination();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::UnmountParams::Pipeline {
public:
  typedef UnmountParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::UnmountResults::Reader {
public:
  typedef UnmountResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::UnmountResults::Builder {
public:
  typedef UnmountResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::UnmountResults::Pipeline {
public:
  typedef UnmountResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::UnmountAllParams::Reader {
public:
  typedef UnmountAllParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::UnmountAllParams::Builder {
public:
  typedef UnmountAllParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::UnmountAllParams::Pipeline {
public:
  typedef UnmountAllParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuthServer::UnmountAllResults::Reader {
public:
  typedef UnmountAllResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuthServer::UnmountAllResults::Builder {
public:
  typedef UnmountAllResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuthServer::UnmountAllResults::Pipeline {
public:
  typedef UnmountAllResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class GhostFSAuth::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef GhostFSAuth Calls;
  typedef GhostFSAuth Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults> authRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class GhostFSAuth::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef GhostFSAuth Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::GhostFSAuth::AuthParams AuthParams;
  typedef  ::GhostFSAuth::AuthResults AuthResults;
  typedef ::capnp::CallContext<AuthParams, AuthResults> AuthContext;
  virtual ::kj::Promise<void> auth(AuthContext context);

  inline  ::GhostFSAuth::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::GhostFSAuth>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class GhostFSAuth::AuthParams::Reader {
public:
  typedef AuthParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuth::AuthParams::Builder {
public:
  typedef AuthParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuth::AuthParams::Pipeline {
public:
  typedef AuthParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuth::AuthResults::Reader {
public:
  typedef AuthResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGhostFs() const;
#if !CAPNP_LITE
  inline  ::GhostFS::Client getGhostFs() const;
#endif  // !CAPNP_LITE

  inline bool getAuthSuccess() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuth::AuthResults::Builder {
public:
  typedef AuthResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGhostFs();
#if !CAPNP_LITE
  inline  ::GhostFS::Client getGhostFs();
  inline void setGhostFs( ::GhostFS::Client&& value);
  inline void setGhostFs( ::GhostFS::Client& value);
  inline void adoptGhostFs(::capnp::Orphan< ::GhostFS>&& value);
  inline ::capnp::Orphan< ::GhostFS> disownGhostFs();
#endif  // !CAPNP_LITE

  inline bool getAuthSuccess();
  inline void setAuthSuccess(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuth::AuthResults::Pipeline {
public:
  typedef AuthResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::GhostFS::Client getGhostFs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class GhostFS::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef GhostFS Calls;
  typedef GhostFS Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::GhostFS::LookupParams,  ::GhostFS::LookupResults> lookupRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::GetattrParams,  ::GhostFS::GetattrResults> getattrRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::SetattrParams,  ::GhostFS::SetattrResults> setattrRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::ReadlinkParams,  ::GhostFS::ReadlinkResults> readlinkRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::MknodParams,  ::GhostFS::MknodResults> mknodRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::MkdirParams,  ::GhostFS::MkdirResults> mkdirRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::UnlinkParams,  ::GhostFS::UnlinkResults> unlinkRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::RmdirParams,  ::GhostFS::RmdirResults> rmdirRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::SymlinkParams,  ::GhostFS::SymlinkResults> symlinkRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::RenameParams,  ::GhostFS::RenameResults> renameRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::OpenParams,  ::GhostFS::OpenResults> openRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::ReadParams,  ::GhostFS::ReadResults> readRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::WriteParams,  ::GhostFS::WriteResults> writeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::ReleaseParams,  ::GhostFS::ReleaseResults> releaseRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::ReaddirParams,  ::GhostFS::ReaddirResults> readdirRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::SetxattrParams,  ::GhostFS::SetxattrResults> setxattrRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::AccessParams,  ::GhostFS::AccessResults> accessRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::CreateParams,  ::GhostFS::CreateResults> createRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::FlushParams,  ::GhostFS::FlushResults> flushRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::FsyncParams,  ::GhostFS::FsyncResults> fsyncRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::BulkWriteParams,  ::GhostFS::BulkWriteResults> bulkWriteRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class GhostFS::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef GhostFS Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::GhostFS::LookupParams LookupParams;
  typedef  ::GhostFS::LookupResults LookupResults;
  typedef ::capnp::CallContext<LookupParams, LookupResults> LookupContext;
  virtual ::kj::Promise<void> lookup(LookupContext context);
  typedef  ::GhostFS::GetattrParams GetattrParams;
  typedef  ::GhostFS::GetattrResults GetattrResults;
  typedef ::capnp::CallContext<GetattrParams, GetattrResults> GetattrContext;
  virtual ::kj::Promise<void> getattr(GetattrContext context);
  typedef  ::GhostFS::SetattrParams SetattrParams;
  typedef  ::GhostFS::SetattrResults SetattrResults;
  typedef ::capnp::CallContext<SetattrParams, SetattrResults> SetattrContext;
  virtual ::kj::Promise<void> setattr(SetattrContext context);
  typedef  ::GhostFS::ReadlinkParams ReadlinkParams;
  typedef  ::GhostFS::ReadlinkResults ReadlinkResults;
  typedef ::capnp::CallContext<ReadlinkParams, ReadlinkResults> ReadlinkContext;
  virtual ::kj::Promise<void> readlink(ReadlinkContext context);
  typedef  ::GhostFS::MknodParams MknodParams;
  typedef  ::GhostFS::MknodResults MknodResults;
  typedef ::capnp::CallContext<MknodParams, MknodResults> MknodContext;
  virtual ::kj::Promise<void> mknod(MknodContext context);
  typedef  ::GhostFS::MkdirParams MkdirParams;
  typedef  ::GhostFS::MkdirResults MkdirResults;
  typedef ::capnp::CallContext<MkdirParams, MkdirResults> MkdirContext;
  virtual ::kj::Promise<void> mkdir(MkdirContext context);
  typedef  ::GhostFS::UnlinkParams UnlinkParams;
  typedef  ::GhostFS::UnlinkResults UnlinkResults;
  typedef ::capnp::CallContext<UnlinkParams, UnlinkResults> UnlinkContext;
  virtual ::kj::Promise<void> unlink(UnlinkContext context);
  typedef  ::GhostFS::RmdirParams RmdirParams;
  typedef  ::GhostFS::RmdirResults RmdirResults;
  typedef ::capnp::CallContext<RmdirParams, RmdirResults> RmdirContext;
  virtual ::kj::Promise<void> rmdir(RmdirContext context);
  typedef  ::GhostFS::SymlinkParams SymlinkParams;
  typedef  ::GhostFS::SymlinkResults SymlinkResults;
  typedef ::capnp::CallContext<SymlinkParams, SymlinkResults> SymlinkContext;
  virtual ::kj::Promise<void> symlink(SymlinkContext context);
  typedef  ::GhostFS::RenameParams RenameParams;
  typedef  ::GhostFS::RenameResults RenameResults;
  typedef ::capnp::CallContext<RenameParams, RenameResults> RenameContext;
  virtual ::kj::Promise<void> rename(RenameContext context);
  typedef  ::GhostFS::OpenParams OpenParams;
  typedef  ::GhostFS::OpenResults OpenResults;
  typedef ::capnp::CallContext<OpenParams, OpenResults> OpenContext;
  virtual ::kj::Promise<void> open(OpenContext context);
  typedef  ::GhostFS::ReadParams ReadParams;
  typedef  ::GhostFS::ReadResults ReadResults;
  typedef ::capnp::CallContext<ReadParams, ReadResults> ReadContext;
  virtual ::kj::Promise<void> read(ReadContext context);
  typedef  ::GhostFS::WriteParams WriteParams;
  typedef  ::GhostFS::WriteResults WriteResults;
  typedef ::capnp::CallContext<WriteParams, WriteResults> WriteContext;
  virtual ::kj::Promise<void> write(WriteContext context);
  typedef  ::GhostFS::ReleaseParams ReleaseParams;
  typedef  ::GhostFS::ReleaseResults ReleaseResults;
  typedef ::capnp::CallContext<ReleaseParams, ReleaseResults> ReleaseContext;
  virtual ::kj::Promise<void> release(ReleaseContext context);
  typedef  ::GhostFS::ReaddirParams ReaddirParams;
  typedef  ::GhostFS::ReaddirResults ReaddirResults;
  typedef ::capnp::CallContext<ReaddirParams, ReaddirResults> ReaddirContext;
  virtual ::kj::Promise<void> readdir(ReaddirContext context);
  typedef  ::GhostFS::SetxattrParams SetxattrParams;
  typedef  ::GhostFS::SetxattrResults SetxattrResults;
  typedef ::capnp::CallContext<SetxattrParams, SetxattrResults> SetxattrContext;
  virtual ::kj::Promise<void> setxattr(SetxattrContext context);
  typedef  ::GhostFS::AccessParams AccessParams;
  typedef  ::GhostFS::AccessResults AccessResults;
  typedef ::capnp::CallContext<AccessParams, AccessResults> AccessContext;
  virtual ::kj::Promise<void> access(AccessContext context);
  typedef  ::GhostFS::CreateParams CreateParams;
  typedef  ::GhostFS::CreateResults CreateResults;
  typedef ::capnp::CallContext<CreateParams, CreateResults> CreateContext;
  virtual ::kj::Promise<void> create(CreateContext context);
  typedef  ::GhostFS::FlushParams FlushParams;
  typedef  ::GhostFS::FlushResults FlushResults;
  typedef ::capnp::CallContext<FlushParams, FlushResults> FlushContext;
  virtual ::kj::Promise<void> flush(FlushContext context);
  typedef  ::GhostFS::FsyncParams FsyncParams;
  typedef  ::GhostFS::FsyncResults FsyncResults;
  typedef ::capnp::CallContext<FsyncParams, FsyncResults> FsyncContext;
  virtual ::kj::Promise<void> fsync(FsyncContext context);
  typedef  ::GhostFS::BulkWriteParams BulkWriteParams;
  typedef  ::GhostFS::BulkWriteResults BulkWriteResults;
  typedef ::capnp::CallContext<BulkWriteParams, BulkWriteResults> BulkWriteContext;
  virtual ::kj::Promise<void> bulkWrite(BulkWriteContext context);

  inline  ::GhostFS::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::GhostFS>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class GhostFS::LookupParams::Reader {
public:
  typedef LookupParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Lookup::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::LookupParams::Builder {
public:
  typedef LookupParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Lookup::Builder getReq();
  inline void setReq( ::Lookup::Reader value);
  inline  ::Lookup::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Lookup>&& value);
  inline ::capnp::Orphan< ::Lookup> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::LookupParams::Pipeline {
public:
  typedef LookupParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Lookup::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::LookupResults::Reader {
public:
  typedef LookupResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::LookupResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::LookupResults::Builder {
public:
  typedef LookupResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::LookupResponse::Builder getRes();
  inline void setRes( ::LookupResponse::Reader value);
  inline  ::LookupResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::LookupResponse>&& value);
  inline ::capnp::Orphan< ::LookupResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::LookupResults::Pipeline {
public:
  typedef LookupResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::LookupResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::GetattrParams::Reader {
public:
  typedef GetattrParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Getattr::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::GetattrParams::Builder {
public:
  typedef GetattrParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Getattr::Builder getReq();
  inline void setReq( ::Getattr::Reader value);
  inline  ::Getattr::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Getattr>&& value);
  inline ::capnp::Orphan< ::Getattr> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::GetattrParams::Pipeline {
public:
  typedef GetattrParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Getattr::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::GetattrResults::Reader {
public:
  typedef GetattrResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::GetattrResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::GetattrResults::Builder {
public:
  typedef GetattrResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::GetattrResponse::Builder getRes();
  inline void setRes( ::GetattrResponse::Reader value);
  inline  ::GetattrResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::GetattrResponse>&& value);
  inline ::capnp::Orphan< ::GetattrResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::GetattrResults::Pipeline {
public:
  typedef GetattrResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::GetattrResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SetattrParams::Reader {
public:
  typedef SetattrParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Setattr::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SetattrParams::Builder {
public:
  typedef SetattrParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Setattr::Builder getReq();
  inline void setReq( ::Setattr::Reader value);
  inline  ::Setattr::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Setattr>&& value);
  inline ::capnp::Orphan< ::Setattr> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SetattrParams::Pipeline {
public:
  typedef SetattrParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Setattr::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SetattrResults::Reader {
public:
  typedef SetattrResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::SetattrResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SetattrResults::Builder {
public:
  typedef SetattrResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::SetattrResponse::Builder getRes();
  inline void setRes( ::SetattrResponse::Reader value);
  inline  ::SetattrResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::SetattrResponse>&& value);
  inline ::capnp::Orphan< ::SetattrResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SetattrResults::Pipeline {
public:
  typedef SetattrResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::SetattrResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadlinkParams::Reader {
public:
  typedef ReadlinkParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Readlink::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadlinkParams::Builder {
public:
  typedef ReadlinkParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Readlink::Builder getReq();
  inline void setReq( ::Readlink::Reader value);
  inline  ::Readlink::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Readlink>&& value);
  inline ::capnp::Orphan< ::Readlink> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadlinkParams::Pipeline {
public:
  typedef ReadlinkParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Readlink::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadlinkResults::Reader {
public:
  typedef ReadlinkResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::ReadlinkResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadlinkResults::Builder {
public:
  typedef ReadlinkResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::ReadlinkResponse::Builder getRes();
  inline void setRes( ::ReadlinkResponse::Reader value);
  inline  ::ReadlinkResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::ReadlinkResponse>&& value);
  inline ::capnp::Orphan< ::ReadlinkResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadlinkResults::Pipeline {
public:
  typedef ReadlinkResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReadlinkResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::MknodParams::Reader {
public:
  typedef MknodParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Mknod::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::MknodParams::Builder {
public:
  typedef MknodParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Mknod::Builder getReq();
  inline void setReq( ::Mknod::Reader value);
  inline  ::Mknod::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Mknod>&& value);
  inline ::capnp::Orphan< ::Mknod> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::MknodParams::Pipeline {
public:
  typedef MknodParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Mknod::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::MknodResults::Reader {
public:
  typedef MknodResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::MknodResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::MknodResults::Builder {
public:
  typedef MknodResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::MknodResponse::Builder getRes();
  inline void setRes( ::MknodResponse::Reader value);
  inline  ::MknodResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::MknodResponse>&& value);
  inline ::capnp::Orphan< ::MknodResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::MknodResults::Pipeline {
public:
  typedef MknodResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::MknodResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::MkdirParams::Reader {
public:
  typedef MkdirParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Mkdir::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::MkdirParams::Builder {
public:
  typedef MkdirParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Mkdir::Builder getReq();
  inline void setReq( ::Mkdir::Reader value);
  inline  ::Mkdir::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Mkdir>&& value);
  inline ::capnp::Orphan< ::Mkdir> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::MkdirParams::Pipeline {
public:
  typedef MkdirParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Mkdir::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::MkdirResults::Reader {
public:
  typedef MkdirResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::MkdirResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::MkdirResults::Builder {
public:
  typedef MkdirResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::MkdirResponse::Builder getRes();
  inline void setRes( ::MkdirResponse::Reader value);
  inline  ::MkdirResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::MkdirResponse>&& value);
  inline ::capnp::Orphan< ::MkdirResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::MkdirResults::Pipeline {
public:
  typedef MkdirResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::MkdirResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::UnlinkParams::Reader {
public:
  typedef UnlinkParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Unlink::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::UnlinkParams::Builder {
public:
  typedef UnlinkParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Unlink::Builder getReq();
  inline void setReq( ::Unlink::Reader value);
  inline  ::Unlink::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Unlink>&& value);
  inline ::capnp::Orphan< ::Unlink> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::UnlinkParams::Pipeline {
public:
  typedef UnlinkParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Unlink::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::UnlinkResults::Reader {
public:
  typedef UnlinkResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::UnlinkResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::UnlinkResults::Builder {
public:
  typedef UnlinkResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::UnlinkResponse::Builder getRes();
  inline void setRes( ::UnlinkResponse::Reader value);
  inline  ::UnlinkResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::UnlinkResponse>&& value);
  inline ::capnp::Orphan< ::UnlinkResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::UnlinkResults::Pipeline {
public:
  typedef UnlinkResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::UnlinkResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::RmdirParams::Reader {
public:
  typedef RmdirParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Rmdir::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::RmdirParams::Builder {
public:
  typedef RmdirParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Rmdir::Builder getReq();
  inline void setReq( ::Rmdir::Reader value);
  inline  ::Rmdir::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Rmdir>&& value);
  inline ::capnp::Orphan< ::Rmdir> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::RmdirParams::Pipeline {
public:
  typedef RmdirParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Rmdir::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::RmdirResults::Reader {
public:
  typedef RmdirResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::RmdirResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::RmdirResults::Builder {
public:
  typedef RmdirResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::RmdirResponse::Builder getRes();
  inline void setRes( ::RmdirResponse::Reader value);
  inline  ::RmdirResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::RmdirResponse>&& value);
  inline ::capnp::Orphan< ::RmdirResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::RmdirResults::Pipeline {
public:
  typedef RmdirResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RmdirResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SymlinkParams::Reader {
public:
  typedef SymlinkParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Symlink::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SymlinkParams::Builder {
public:
  typedef SymlinkParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Symlink::Builder getReq();
  inline void setReq( ::Symlink::Reader value);
  inline  ::Symlink::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Symlink>&& value);
  inline ::capnp::Orphan< ::Symlink> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SymlinkParams::Pipeline {
public:
  typedef SymlinkParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Symlink::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SymlinkResults::Reader {
public:
  typedef SymlinkResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::SymlinkResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SymlinkResults::Builder {
public:
  typedef SymlinkResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::SymlinkResponse::Builder getRes();
  inline void setRes( ::SymlinkResponse::Reader value);
  inline  ::SymlinkResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::SymlinkResponse>&& value);
  inline ::capnp::Orphan< ::SymlinkResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SymlinkResults::Pipeline {
public:
  typedef SymlinkResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::SymlinkResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::RenameParams::Reader {
public:
  typedef RenameParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Rename::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::RenameParams::Builder {
public:
  typedef RenameParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Rename::Builder getReq();
  inline void setReq( ::Rename::Reader value);
  inline  ::Rename::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Rename>&& value);
  inline ::capnp::Orphan< ::Rename> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::RenameParams::Pipeline {
public:
  typedef RenameParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Rename::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::RenameResults::Reader {
public:
  typedef RenameResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::RenameResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::RenameResults::Builder {
public:
  typedef RenameResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::RenameResponse::Builder getRes();
  inline void setRes( ::RenameResponse::Reader value);
  inline  ::RenameResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::RenameResponse>&& value);
  inline ::capnp::Orphan< ::RenameResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::RenameResults::Pipeline {
public:
  typedef RenameResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RenameResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::OpenParams::Reader {
public:
  typedef OpenParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Open::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::OpenParams::Builder {
public:
  typedef OpenParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Open::Builder getReq();
  inline void setReq( ::Open::Reader value);
  inline  ::Open::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Open>&& value);
  inline ::capnp::Orphan< ::Open> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::OpenParams::Pipeline {
public:
  typedef OpenParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Open::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::OpenResults::Reader {
public:
  typedef OpenResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::OpenResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::OpenResults::Builder {
public:
  typedef OpenResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::OpenResponse::Builder getRes();
  inline void setRes( ::OpenResponse::Reader value);
  inline  ::OpenResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::OpenResponse>&& value);
  inline ::capnp::Orphan< ::OpenResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::OpenResults::Pipeline {
public:
  typedef OpenResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::OpenResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadParams::Reader {
public:
  typedef ReadParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Read::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadParams::Builder {
public:
  typedef ReadParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Read::Builder getReq();
  inline void setReq( ::Read::Reader value);
  inline  ::Read::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Read>&& value);
  inline ::capnp::Orphan< ::Read> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadParams::Pipeline {
public:
  typedef ReadParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Read::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadResults::Reader {
public:
  typedef ReadResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::ReadResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadResults::Builder {
public:
  typedef ReadResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::ReadResponse::Builder getRes();
  inline void setRes( ::ReadResponse::Reader value);
  inline  ::ReadResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::ReadResponse>&& value);
  inline ::capnp::Orphan< ::ReadResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadResults::Pipeline {
public:
  typedef ReadResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReadResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::WriteParams::Reader {
public:
  typedef WriteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Write::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::WriteParams::Builder {
public:
  typedef WriteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Write::Builder getReq();
  inline void setReq( ::Write::Reader value);
  inline  ::Write::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Write>&& value);
  inline ::capnp::Orphan< ::Write> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::WriteParams::Pipeline {
public:
  typedef WriteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Write::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::WriteResults::Reader {
public:
  typedef WriteResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::WriteResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::WriteResults::Builder {
public:
  typedef WriteResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::WriteResponse::Builder getRes();
  inline void setRes( ::WriteResponse::Reader value);
  inline  ::WriteResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::WriteResponse>&& value);
  inline ::capnp::Orphan< ::WriteResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::WriteResults::Pipeline {
public:
  typedef WriteResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::WriteResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReleaseParams::Reader {
public:
  typedef ReleaseParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Release::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReleaseParams::Builder {
public:
  typedef ReleaseParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Release::Builder getReq();
  inline void setReq( ::Release::Reader value);
  inline  ::Release::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Release>&& value);
  inline ::capnp::Orphan< ::Release> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReleaseParams::Pipeline {
public:
  typedef ReleaseParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Release::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReleaseResults::Reader {
public:
  typedef ReleaseResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::ReleaseResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReleaseResults::Builder {
public:
  typedef ReleaseResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::ReleaseResponse::Builder getRes();
  inline void setRes( ::ReleaseResponse::Reader value);
  inline  ::ReleaseResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::ReleaseResponse>&& value);
  inline ::capnp::Orphan< ::ReleaseResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReleaseResults::Pipeline {
public:
  typedef ReleaseResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReleaseResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReaddirParams::Reader {
public:
  typedef ReaddirParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Readdir::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReaddirParams::Builder {
public:
  typedef ReaddirParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Readdir::Builder getReq();
  inline void setReq( ::Readdir::Reader value);
  inline  ::Readdir::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Readdir>&& value);
  inline ::capnp::Orphan< ::Readdir> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReaddirParams::Pipeline {
public:
  typedef ReaddirParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Readdir::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReaddirResults::Reader {
public:
  typedef ReaddirResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::ReaddirResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReaddirResults::Builder {
public:
  typedef ReaddirResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::ReaddirResponse::Builder getRes();
  inline void setRes( ::ReaddirResponse::Reader value);
  inline  ::ReaddirResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::ReaddirResponse>&& value);
  inline ::capnp::Orphan< ::ReaddirResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReaddirResults::Pipeline {
public:
  typedef ReaddirResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReaddirResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SetxattrParams::Reader {
public:
  typedef SetxattrParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Setxattr::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SetxattrParams::Builder {
public:
  typedef SetxattrParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Setxattr::Builder getReq();
  inline void setReq( ::Setxattr::Reader value);
  inline  ::Setxattr::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Setxattr>&& value);
  inline ::capnp::Orphan< ::Setxattr> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SetxattrParams::Pipeline {
public:
  typedef SetxattrParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Setxattr::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::SetxattrResults::Reader {
public:
  typedef SetxattrResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::SetxattrResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::SetxattrResults::Builder {
public:
  typedef SetxattrResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::SetxattrResponse::Builder getRes();
  inline void setRes( ::SetxattrResponse::Reader value);
  inline  ::SetxattrResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::SetxattrResponse>&& value);
  inline ::capnp::Orphan< ::SetxattrResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::SetxattrResults::Pipeline {
public:
  typedef SetxattrResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::SetxattrResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::AccessParams::Reader {
public:
  typedef AccessParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Access::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::AccessParams::Builder {
public:
  typedef AccessParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Access::Builder getReq();
  inline void setReq( ::Access::Reader value);
  inline  ::Access::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Access>&& value);
  inline ::capnp::Orphan< ::Access> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::AccessParams::Pipeline {
public:
  typedef AccessParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Access::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::AccessResults::Reader {
public:
  typedef AccessResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::AccessResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::AccessResults::Builder {
public:
  typedef AccessResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::AccessResponse::Builder getRes();
  inline void setRes( ::AccessResponse::Reader value);
  inline  ::AccessResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::AccessResponse>&& value);
  inline ::capnp::Orphan< ::AccessResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::AccessResults::Pipeline {
public:
  typedef AccessResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::AccessResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::CreateParams::Reader {
public:
  typedef CreateParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Create::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::CreateParams::Builder {
public:
  typedef CreateParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Create::Builder getReq();
  inline void setReq( ::Create::Reader value);
  inline  ::Create::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Create>&& value);
  inline ::capnp::Orphan< ::Create> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::CreateParams::Pipeline {
public:
  typedef CreateParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Create::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::CreateResults::Reader {
public:
  typedef CreateResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::CreateResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::CreateResults::Builder {
public:
  typedef CreateResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::CreateResponse::Builder getRes();
  inline void setRes( ::CreateResponse::Reader value);
  inline  ::CreateResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::CreateResponse>&& value);
  inline ::capnp::Orphan< ::CreateResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::CreateResults::Pipeline {
public:
  typedef CreateResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::CreateResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::FlushParams::Reader {
public:
  typedef FlushParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Flush::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::FlushParams::Builder {
public:
  typedef FlushParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Flush::Builder getReq();
  inline void setReq( ::Flush::Reader value);
  inline  ::Flush::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Flush>&& value);
  inline ::capnp::Orphan< ::Flush> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::FlushParams::Pipeline {
public:
  typedef FlushParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Flush::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::FlushResults::Reader {
public:
  typedef FlushResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::FlushResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::FlushResults::Builder {
public:
  typedef FlushResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::FlushResponse::Builder getRes();
  inline void setRes( ::FlushResponse::Reader value);
  inline  ::FlushResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::FlushResponse>&& value);
  inline ::capnp::Orphan< ::FlushResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::FlushResults::Pipeline {
public:
  typedef FlushResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::FlushResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::FsyncParams::Reader {
public:
  typedef FsyncParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Fsync::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::FsyncParams::Builder {
public:
  typedef FsyncParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Fsync::Builder getReq();
  inline void setReq( ::Fsync::Reader value);
  inline  ::Fsync::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Fsync>&& value);
  inline ::capnp::Orphan< ::Fsync> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::FsyncParams::Pipeline {
public:
  typedef FsyncParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Fsync::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::FsyncResults::Reader {
public:
  typedef FsyncResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::FsyncResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::FsyncResults::Builder {
public:
  typedef FsyncResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::FsyncResponse::Builder getRes();
  inline void setRes( ::FsyncResponse::Reader value);
  inline  ::FsyncResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::FsyncResponse>&& value);
  inline ::capnp::Orphan< ::FsyncResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::FsyncResults::Pipeline {
public:
  typedef FsyncResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::FsyncResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::BulkWriteParams::Reader {
public:
  typedef BulkWriteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::BulkWriteParams::Builder {
public:
  typedef BulkWriteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Builder getReq();
  inline void setReq( ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Builder initReq(unsigned int size);
  inline void adoptReq(::capnp::Orphan< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::BulkWriteParams::Pipeline {
public:
  typedef BulkWriteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::BulkWriteResults::Reader {
public:
  typedef BulkWriteResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::BulkWriteResults::Builder {
public:
  typedef BulkWriteResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Builder getRes();
  inline void setRes( ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Builder initRes(unsigned int size);
  inline void adoptRes(::capnp::Orphan< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::BulkWriteResults::Pipeline {
public:
  typedef BulkWriteResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline GhostFSAuthServer::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline GhostFSAuthServer::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline GhostFSAuthServer::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline GhostFSAuthServer::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline GhostFSAuthServer::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::GhostFSAuthServer::Client& GhostFSAuthServer::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::GhostFSAuthServer::Client& GhostFSAuthServer::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool GhostFSAuthServer::AuthorizeParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::AuthorizeParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::AuthorizeParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::AuthorizeParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::AuthorizeParams::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::AuthorizeParams::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::AuthorizeParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::AuthorizeParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int64_t GhostFSAuthServer::AuthorizeParams::Reader::getRetries() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t GhostFSAuthServer::AuthorizeParams::Builder::getRetries() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::setRetries( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GhostFSAuthServer::AuthorizeParams::Reader::getExpires() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GhostFSAuthServer::AuthorizeParams::Builder::getExpires() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuthServer::AuthorizeParams::Builder::setExpires( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GhostFSAuthServer::AuthorizeResults::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::AuthorizeResults::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::AuthorizeResults::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeResults::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::AuthorizeResults::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::AuthorizeResults::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::AuthorizeResults::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::AuthorizeResults::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::MountParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::MountParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::MountParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::MountParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::MountParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::MountParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::MountParams::Reader::hasSource() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::MountParams::Builder::hasSource() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::MountParams::Reader::getSource() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::getSource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::MountParams::Builder::setSource( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::initSource(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::MountParams::Builder::adoptSource(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::MountParams::Builder::disownSource() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::MountParams::Reader::hasDestination() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::MountParams::Builder::hasDestination() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::MountParams::Reader::getDestination() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::getDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::MountParams::Builder::setDestination( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountParams::Builder::initDestination(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::MountParams::Builder::adoptDestination(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::MountParams::Builder::disownDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::MountResults::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GhostFSAuthServer::MountResults::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuthServer::MountResults::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GhostFSAuthServer::MountsParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::MountsParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::MountsParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountsParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::MountsParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::MountsParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::MountsParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::MountsParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::MountsResults::Reader::hasMounts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::MountsResults::Builder::hasMounts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader GhostFSAuthServer::MountsResults::Reader::getMounts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder GhostFSAuthServer::MountsResults::Builder::getMounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::MountsResults::Builder::setMounts( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void GhostFSAuthServer::MountsResults::Builder::setMounts(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder GhostFSAuthServer::MountsResults::Builder::initMounts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::MountsResults::Builder::adoptMounts(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> GhostFSAuthServer::MountsResults::Builder::disownMounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::UnmountParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::UnmountParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::UnmountParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::UnmountParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::UnmountParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::UnmountParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::UnmountParams::Reader::hasDestination() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::UnmountParams::Builder::hasDestination() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::UnmountParams::Reader::getDestination() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountParams::Builder::getDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::UnmountParams::Builder::setDestination( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountParams::Builder::initDestination(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::UnmountParams::Builder::adoptDestination(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::UnmountParams::Builder::disownDestination() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::UnmountResults::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GhostFSAuthServer::UnmountResults::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuthServer::UnmountResults::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GhostFSAuthServer::UnmountAllParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuthServer::UnmountAllParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuthServer::UnmountAllParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountAllParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuthServer::UnmountAllParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuthServer::UnmountAllParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuthServer::UnmountAllParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuthServer::UnmountAllParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuthServer::UnmountAllResults::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GhostFSAuthServer::UnmountAllResults::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuthServer::UnmountAllResults::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline GhostFSAuth::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline GhostFSAuth::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline GhostFSAuth::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline GhostFSAuth::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline GhostFSAuth::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::GhostFSAuth::Client& GhostFSAuth::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::GhostFSAuth::Client& GhostFSAuth::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool GhostFSAuth::AuthParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuth::AuthParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuth::AuthParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuth::AuthParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuth::AuthParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuth::AuthParams::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthParams::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuth::AuthParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GhostFSAuth::AuthParams::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuth::AuthParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuth::AuthParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GhostFSAuth::AuthResults::Reader::hasGhostFs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthResults::Builder::hasGhostFs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Reader::getGhostFs() const {
  return ::capnp::_::PointerHelpers< ::GhostFS>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Builder::getGhostFs() {
  return ::capnp::_::PointerHelpers< ::GhostFS>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Pipeline::getGhostFs() {
  return  ::GhostFS::Client(_typeless.getPointerField(0).asCap());
}
inline void GhostFSAuth::AuthResults::Builder::setGhostFs( ::GhostFS::Client&& cap) {
  ::capnp::_::PointerHelpers< ::GhostFS>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void GhostFSAuth::AuthResults::Builder::setGhostFs( ::GhostFS::Client& cap) {
  ::capnp::_::PointerHelpers< ::GhostFS>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void GhostFSAuth::AuthResults::Builder::adoptGhostFs(
    ::capnp::Orphan< ::GhostFS>&& value) {
  ::capnp::_::PointerHelpers< ::GhostFS>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GhostFS> GhostFSAuth::AuthResults::Builder::disownGhostFs() {
  return ::capnp::_::PointerHelpers< ::GhostFS>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool GhostFSAuth::AuthResults::Reader::getAuthSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool GhostFSAuth::AuthResults::Builder::getAuthSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GhostFSAuth::AuthResults::Builder::setAuthSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline GhostFS::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline GhostFS::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline GhostFS::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline GhostFS::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline GhostFS::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::GhostFS::Client& GhostFS::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::GhostFS::Client& GhostFS::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool GhostFS::LookupParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::LookupParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Lookup::Reader GhostFS::LookupParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Lookup>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Lookup::Builder GhostFS::LookupParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Lookup>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Lookup::Pipeline GhostFS::LookupParams::Pipeline::getReq() {
  return  ::Lookup::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::LookupParams::Builder::setReq( ::Lookup::Reader value) {
  ::capnp::_::PointerHelpers< ::Lookup>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Lookup::Builder GhostFS::LookupParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Lookup>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::LookupParams::Builder::adoptReq(
    ::capnp::Orphan< ::Lookup>&& value) {
  ::capnp::_::PointerHelpers< ::Lookup>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Lookup> GhostFS::LookupParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Lookup>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::LookupResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::LookupResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::LookupResponse::Reader GhostFS::LookupResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::LookupResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::LookupResponse::Builder GhostFS::LookupResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::LookupResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::LookupResponse::Pipeline GhostFS::LookupResults::Pipeline::getRes() {
  return  ::LookupResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::LookupResults::Builder::setRes( ::LookupResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::LookupResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::LookupResponse::Builder GhostFS::LookupResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::LookupResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::LookupResults::Builder::adoptRes(
    ::capnp::Orphan< ::LookupResponse>&& value) {
  ::capnp::_::PointerHelpers< ::LookupResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LookupResponse> GhostFS::LookupResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::LookupResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::GetattrParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::GetattrParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Getattr::Reader GhostFS::GetattrParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Getattr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Getattr::Builder GhostFS::GetattrParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Getattr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Getattr::Pipeline GhostFS::GetattrParams::Pipeline::getReq() {
  return  ::Getattr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::GetattrParams::Builder::setReq( ::Getattr::Reader value) {
  ::capnp::_::PointerHelpers< ::Getattr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Getattr::Builder GhostFS::GetattrParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Getattr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::GetattrParams::Builder::adoptReq(
    ::capnp::Orphan< ::Getattr>&& value) {
  ::capnp::_::PointerHelpers< ::Getattr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Getattr> GhostFS::GetattrParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Getattr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::GetattrResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::GetattrResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::GetattrResponse::Reader GhostFS::GetattrResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::GetattrResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GetattrResponse::Builder GhostFS::GetattrResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::GetattrResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::GetattrResponse::Pipeline GhostFS::GetattrResults::Pipeline::getRes() {
  return  ::GetattrResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::GetattrResults::Builder::setRes( ::GetattrResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::GetattrResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::GetattrResponse::Builder GhostFS::GetattrResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::GetattrResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::GetattrResults::Builder::adoptRes(
    ::capnp::Orphan< ::GetattrResponse>&& value) {
  ::capnp::_::PointerHelpers< ::GetattrResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GetattrResponse> GhostFS::GetattrResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::GetattrResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SetattrParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SetattrParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Setattr::Reader GhostFS::SetattrParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Setattr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Setattr::Builder GhostFS::SetattrParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Setattr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Setattr::Pipeline GhostFS::SetattrParams::Pipeline::getReq() {
  return  ::Setattr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SetattrParams::Builder::setReq( ::Setattr::Reader value) {
  ::capnp::_::PointerHelpers< ::Setattr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Setattr::Builder GhostFS::SetattrParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Setattr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SetattrParams::Builder::adoptReq(
    ::capnp::Orphan< ::Setattr>&& value) {
  ::capnp::_::PointerHelpers< ::Setattr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Setattr> GhostFS::SetattrParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Setattr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SetattrResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SetattrResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SetattrResponse::Reader GhostFS::SetattrResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::SetattrResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SetattrResponse::Builder GhostFS::SetattrResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::SetattrResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SetattrResponse::Pipeline GhostFS::SetattrResults::Pipeline::getRes() {
  return  ::SetattrResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SetattrResults::Builder::setRes( ::SetattrResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::SetattrResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SetattrResponse::Builder GhostFS::SetattrResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::SetattrResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SetattrResults::Builder::adoptRes(
    ::capnp::Orphan< ::SetattrResponse>&& value) {
  ::capnp::_::PointerHelpers< ::SetattrResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SetattrResponse> GhostFS::SetattrResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::SetattrResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadlinkParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadlinkParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Readlink::Reader GhostFS::ReadlinkParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Readlink>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Readlink::Builder GhostFS::ReadlinkParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Readlink>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Readlink::Pipeline GhostFS::ReadlinkParams::Pipeline::getReq() {
  return  ::Readlink::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadlinkParams::Builder::setReq( ::Readlink::Reader value) {
  ::capnp::_::PointerHelpers< ::Readlink>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Readlink::Builder GhostFS::ReadlinkParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Readlink>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadlinkParams::Builder::adoptReq(
    ::capnp::Orphan< ::Readlink>&& value) {
  ::capnp::_::PointerHelpers< ::Readlink>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Readlink> GhostFS::ReadlinkParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Readlink>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadlinkResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadlinkResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReadlinkResponse::Reader GhostFS::ReadlinkResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::ReadlinkResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReadlinkResponse::Builder GhostFS::ReadlinkResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::ReadlinkResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReadlinkResponse::Pipeline GhostFS::ReadlinkResults::Pipeline::getRes() {
  return  ::ReadlinkResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadlinkResults::Builder::setRes( ::ReadlinkResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::ReadlinkResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReadlinkResponse::Builder GhostFS::ReadlinkResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::ReadlinkResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadlinkResults::Builder::adoptRes(
    ::capnp::Orphan< ::ReadlinkResponse>&& value) {
  ::capnp::_::PointerHelpers< ::ReadlinkResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReadlinkResponse> GhostFS::ReadlinkResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::ReadlinkResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::MknodParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::MknodParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Mknod::Reader GhostFS::MknodParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Mknod>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Mknod::Builder GhostFS::MknodParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Mknod>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Mknod::Pipeline GhostFS::MknodParams::Pipeline::getReq() {
  return  ::Mknod::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::MknodParams::Builder::setReq( ::Mknod::Reader value) {
  ::capnp::_::PointerHelpers< ::Mknod>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Mknod::Builder GhostFS::MknodParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Mknod>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::MknodParams::Builder::adoptReq(
    ::capnp::Orphan< ::Mknod>&& value) {
  ::capnp::_::PointerHelpers< ::Mknod>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Mknod> GhostFS::MknodParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Mknod>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::MknodResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::MknodResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::MknodResponse::Reader GhostFS::MknodResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::MknodResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::MknodResponse::Builder GhostFS::MknodResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::MknodResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::MknodResponse::Pipeline GhostFS::MknodResults::Pipeline::getRes() {
  return  ::MknodResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::MknodResults::Builder::setRes( ::MknodResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::MknodResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::MknodResponse::Builder GhostFS::MknodResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::MknodResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::MknodResults::Builder::adoptRes(
    ::capnp::Orphan< ::MknodResponse>&& value) {
  ::capnp::_::PointerHelpers< ::MknodResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::MknodResponse> GhostFS::MknodResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::MknodResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::MkdirParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::MkdirParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Mkdir::Reader GhostFS::MkdirParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Mkdir>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Mkdir::Builder GhostFS::MkdirParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Mkdir>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Mkdir::Pipeline GhostFS::MkdirParams::Pipeline::getReq() {
  return  ::Mkdir::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::MkdirParams::Builder::setReq( ::Mkdir::Reader value) {
  ::capnp::_::PointerHelpers< ::Mkdir>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Mkdir::Builder GhostFS::MkdirParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Mkdir>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::MkdirParams::Builder::adoptReq(
    ::capnp::Orphan< ::Mkdir>&& value) {
  ::capnp::_::PointerHelpers< ::Mkdir>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Mkdir> GhostFS::MkdirParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Mkdir>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::MkdirResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::MkdirResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::MkdirResponse::Reader GhostFS::MkdirResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::MkdirResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::MkdirResponse::Builder GhostFS::MkdirResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::MkdirResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::MkdirResponse::Pipeline GhostFS::MkdirResults::Pipeline::getRes() {
  return  ::MkdirResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::MkdirResults::Builder::setRes( ::MkdirResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::MkdirResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::MkdirResponse::Builder GhostFS::MkdirResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::MkdirResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::MkdirResults::Builder::adoptRes(
    ::capnp::Orphan< ::MkdirResponse>&& value) {
  ::capnp::_::PointerHelpers< ::MkdirResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::MkdirResponse> GhostFS::MkdirResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::MkdirResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::UnlinkParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::UnlinkParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Unlink::Reader GhostFS::UnlinkParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Unlink>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Unlink::Builder GhostFS::UnlinkParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Unlink>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Unlink::Pipeline GhostFS::UnlinkParams::Pipeline::getReq() {
  return  ::Unlink::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::UnlinkParams::Builder::setReq( ::Unlink::Reader value) {
  ::capnp::_::PointerHelpers< ::Unlink>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Unlink::Builder GhostFS::UnlinkParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Unlink>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::UnlinkParams::Builder::adoptReq(
    ::capnp::Orphan< ::Unlink>&& value) {
  ::capnp::_::PointerHelpers< ::Unlink>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Unlink> GhostFS::UnlinkParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Unlink>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::UnlinkResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::UnlinkResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::UnlinkResponse::Reader GhostFS::UnlinkResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::UnlinkResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::UnlinkResponse::Builder GhostFS::UnlinkResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::UnlinkResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::UnlinkResponse::Pipeline GhostFS::UnlinkResults::Pipeline::getRes() {
  return  ::UnlinkResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::UnlinkResults::Builder::setRes( ::UnlinkResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::UnlinkResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::UnlinkResponse::Builder GhostFS::UnlinkResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::UnlinkResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::UnlinkResults::Builder::adoptRes(
    ::capnp::Orphan< ::UnlinkResponse>&& value) {
  ::capnp::_::PointerHelpers< ::UnlinkResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::UnlinkResponse> GhostFS::UnlinkResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::UnlinkResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::RmdirParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::RmdirParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Rmdir::Reader GhostFS::RmdirParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Rmdir>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Rmdir::Builder GhostFS::RmdirParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Rmdir>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Rmdir::Pipeline GhostFS::RmdirParams::Pipeline::getReq() {
  return  ::Rmdir::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::RmdirParams::Builder::setReq( ::Rmdir::Reader value) {
  ::capnp::_::PointerHelpers< ::Rmdir>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Rmdir::Builder GhostFS::RmdirParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Rmdir>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::RmdirParams::Builder::adoptReq(
    ::capnp::Orphan< ::Rmdir>&& value) {
  ::capnp::_::PointerHelpers< ::Rmdir>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Rmdir> GhostFS::RmdirParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Rmdir>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::RmdirResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::RmdirResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RmdirResponse::Reader GhostFS::RmdirResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::RmdirResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RmdirResponse::Builder GhostFS::RmdirResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::RmdirResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RmdirResponse::Pipeline GhostFS::RmdirResults::Pipeline::getRes() {
  return  ::RmdirResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::RmdirResults::Builder::setRes( ::RmdirResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::RmdirResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RmdirResponse::Builder GhostFS::RmdirResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::RmdirResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::RmdirResults::Builder::adoptRes(
    ::capnp::Orphan< ::RmdirResponse>&& value) {
  ::capnp::_::PointerHelpers< ::RmdirResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RmdirResponse> GhostFS::RmdirResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::RmdirResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SymlinkParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SymlinkParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Symlink::Reader GhostFS::SymlinkParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Symlink>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Symlink::Builder GhostFS::SymlinkParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Symlink>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Symlink::Pipeline GhostFS::SymlinkParams::Pipeline::getReq() {
  return  ::Symlink::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SymlinkParams::Builder::setReq( ::Symlink::Reader value) {
  ::capnp::_::PointerHelpers< ::Symlink>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Symlink::Builder GhostFS::SymlinkParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Symlink>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SymlinkParams::Builder::adoptReq(
    ::capnp::Orphan< ::Symlink>&& value) {
  ::capnp::_::PointerHelpers< ::Symlink>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Symlink> GhostFS::SymlinkParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Symlink>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SymlinkResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SymlinkResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SymlinkResponse::Reader GhostFS::SymlinkResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::SymlinkResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SymlinkResponse::Builder GhostFS::SymlinkResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::SymlinkResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SymlinkResponse::Pipeline GhostFS::SymlinkResults::Pipeline::getRes() {
  return  ::SymlinkResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SymlinkResults::Builder::setRes( ::SymlinkResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::SymlinkResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SymlinkResponse::Builder GhostFS::SymlinkResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::SymlinkResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SymlinkResults::Builder::adoptRes(
    ::capnp::Orphan< ::SymlinkResponse>&& value) {
  ::capnp::_::PointerHelpers< ::SymlinkResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SymlinkResponse> GhostFS::SymlinkResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::SymlinkResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::RenameParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::RenameParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Rename::Reader GhostFS::RenameParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Rename>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Rename::Builder GhostFS::RenameParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Rename>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Rename::Pipeline GhostFS::RenameParams::Pipeline::getReq() {
  return  ::Rename::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::RenameParams::Builder::setReq( ::Rename::Reader value) {
  ::capnp::_::PointerHelpers< ::Rename>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Rename::Builder GhostFS::RenameParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Rename>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::RenameParams::Builder::adoptReq(
    ::capnp::Orphan< ::Rename>&& value) {
  ::capnp::_::PointerHelpers< ::Rename>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Rename> GhostFS::RenameParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Rename>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::RenameResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::RenameResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RenameResponse::Reader GhostFS::RenameResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::RenameResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RenameResponse::Builder GhostFS::RenameResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::RenameResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RenameResponse::Pipeline GhostFS::RenameResults::Pipeline::getRes() {
  return  ::RenameResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::RenameResults::Builder::setRes( ::RenameResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::RenameResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RenameResponse::Builder GhostFS::RenameResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::RenameResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::RenameResults::Builder::adoptRes(
    ::capnp::Orphan< ::RenameResponse>&& value) {
  ::capnp::_::PointerHelpers< ::RenameResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RenameResponse> GhostFS::RenameResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::RenameResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::OpenParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::OpenParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Open::Reader GhostFS::OpenParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Open>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Open::Builder GhostFS::OpenParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Open>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Open::Pipeline GhostFS::OpenParams::Pipeline::getReq() {
  return  ::Open::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::OpenParams::Builder::setReq( ::Open::Reader value) {
  ::capnp::_::PointerHelpers< ::Open>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Open::Builder GhostFS::OpenParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Open>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::OpenParams::Builder::adoptReq(
    ::capnp::Orphan< ::Open>&& value) {
  ::capnp::_::PointerHelpers< ::Open>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Open> GhostFS::OpenParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Open>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::OpenResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::OpenResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::OpenResponse::Reader GhostFS::OpenResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::OpenResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::OpenResponse::Builder GhostFS::OpenResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::OpenResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::OpenResponse::Pipeline GhostFS::OpenResults::Pipeline::getRes() {
  return  ::OpenResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::OpenResults::Builder::setRes( ::OpenResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::OpenResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::OpenResponse::Builder GhostFS::OpenResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::OpenResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::OpenResults::Builder::adoptRes(
    ::capnp::Orphan< ::OpenResponse>&& value) {
  ::capnp::_::PointerHelpers< ::OpenResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::OpenResponse> GhostFS::OpenResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::OpenResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Read::Reader GhostFS::ReadParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Read>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Read::Builder GhostFS::ReadParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Read>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Read::Pipeline GhostFS::ReadParams::Pipeline::getReq() {
  return  ::Read::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadParams::Builder::setReq( ::Read::Reader value) {
  ::capnp::_::PointerHelpers< ::Read>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Read::Builder GhostFS::ReadParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Read>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadParams::Builder::adoptReq(
    ::capnp::Orphan< ::Read>&& value) {
  ::capnp::_::PointerHelpers< ::Read>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Read> GhostFS::ReadParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Read>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReadResponse::Reader GhostFS::ReadResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReadResponse::Builder GhostFS::ReadResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReadResponse::Pipeline GhostFS::ReadResults::Pipeline::getRes() {
  return  ::ReadResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadResults::Builder::setRes( ::ReadResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::ReadResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReadResponse::Builder GhostFS::ReadResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadResults::Builder::adoptRes(
    ::capnp::Orphan< ::ReadResponse>&& value) {
  ::capnp::_::PointerHelpers< ::ReadResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReadResponse> GhostFS::ReadResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::WriteParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::WriteParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Write::Reader GhostFS::WriteParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Write>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Write::Builder GhostFS::WriteParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Write>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Write::Pipeline GhostFS::WriteParams::Pipeline::getReq() {
  return  ::Write::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::WriteParams::Builder::setReq( ::Write::Reader value) {
  ::capnp::_::PointerHelpers< ::Write>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Write::Builder GhostFS::WriteParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Write>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::WriteParams::Builder::adoptReq(
    ::capnp::Orphan< ::Write>&& value) {
  ::capnp::_::PointerHelpers< ::Write>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Write> GhostFS::WriteParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Write>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::WriteResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::WriteResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::WriteResponse::Reader GhostFS::WriteResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::WriteResponse::Builder GhostFS::WriteResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::WriteResponse::Pipeline GhostFS::WriteResults::Pipeline::getRes() {
  return  ::WriteResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::WriteResults::Builder::setRes( ::WriteResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::WriteResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::WriteResponse::Builder GhostFS::WriteResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::WriteResults::Builder::adoptRes(
    ::capnp::Orphan< ::WriteResponse>&& value) {
  ::capnp::_::PointerHelpers< ::WriteResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::WriteResponse> GhostFS::WriteResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReleaseParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReleaseParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Release::Reader GhostFS::ReleaseParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Release>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Release::Builder GhostFS::ReleaseParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Release>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Release::Pipeline GhostFS::ReleaseParams::Pipeline::getReq() {
  return  ::Release::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReleaseParams::Builder::setReq( ::Release::Reader value) {
  ::capnp::_::PointerHelpers< ::Release>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Release::Builder GhostFS::ReleaseParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Release>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReleaseParams::Builder::adoptReq(
    ::capnp::Orphan< ::Release>&& value) {
  ::capnp::_::PointerHelpers< ::Release>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Release> GhostFS::ReleaseParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Release>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReleaseResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReleaseResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReleaseResponse::Reader GhostFS::ReleaseResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::ReleaseResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReleaseResponse::Builder GhostFS::ReleaseResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::ReleaseResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReleaseResponse::Pipeline GhostFS::ReleaseResults::Pipeline::getRes() {
  return  ::ReleaseResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReleaseResults::Builder::setRes( ::ReleaseResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::ReleaseResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReleaseResponse::Builder GhostFS::ReleaseResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::ReleaseResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReleaseResults::Builder::adoptRes(
    ::capnp::Orphan< ::ReleaseResponse>&& value) {
  ::capnp::_::PointerHelpers< ::ReleaseResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReleaseResponse> GhostFS::ReleaseResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::ReleaseResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReaddirParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReaddirParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Readdir::Reader GhostFS::ReaddirParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Readdir>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Readdir::Builder GhostFS::ReaddirParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Readdir>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Readdir::Pipeline GhostFS::ReaddirParams::Pipeline::getReq() {
  return  ::Readdir::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReaddirParams::Builder::setReq( ::Readdir::Reader value) {
  ::capnp::_::PointerHelpers< ::Readdir>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Readdir::Builder GhostFS::ReaddirParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Readdir>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReaddirParams::Builder::adoptReq(
    ::capnp::Orphan< ::Readdir>&& value) {
  ::capnp::_::PointerHelpers< ::Readdir>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Readdir> GhostFS::ReaddirParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Readdir>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReaddirResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReaddirResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReaddirResponse::Reader GhostFS::ReaddirResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::ReaddirResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReaddirResponse::Builder GhostFS::ReaddirResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::ReaddirResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReaddirResponse::Pipeline GhostFS::ReaddirResults::Pipeline::getRes() {
  return  ::ReaddirResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReaddirResults::Builder::setRes( ::ReaddirResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::ReaddirResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReaddirResponse::Builder GhostFS::ReaddirResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::ReaddirResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReaddirResults::Builder::adoptRes(
    ::capnp::Orphan< ::ReaddirResponse>&& value) {
  ::capnp::_::PointerHelpers< ::ReaddirResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReaddirResponse> GhostFS::ReaddirResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::ReaddirResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SetxattrParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SetxattrParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Setxattr::Reader GhostFS::SetxattrParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Setxattr>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Setxattr::Builder GhostFS::SetxattrParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Setxattr>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Setxattr::Pipeline GhostFS::SetxattrParams::Pipeline::getReq() {
  return  ::Setxattr::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SetxattrParams::Builder::setReq( ::Setxattr::Reader value) {
  ::capnp::_::PointerHelpers< ::Setxattr>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Setxattr::Builder GhostFS::SetxattrParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Setxattr>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SetxattrParams::Builder::adoptReq(
    ::capnp::Orphan< ::Setxattr>&& value) {
  ::capnp::_::PointerHelpers< ::Setxattr>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Setxattr> GhostFS::SetxattrParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Setxattr>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::SetxattrResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::SetxattrResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::SetxattrResponse::Reader GhostFS::SetxattrResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::SetxattrResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::SetxattrResponse::Builder GhostFS::SetxattrResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::SetxattrResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SetxattrResponse::Pipeline GhostFS::SetxattrResults::Pipeline::getRes() {
  return  ::SetxattrResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::SetxattrResults::Builder::setRes( ::SetxattrResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::SetxattrResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::SetxattrResponse::Builder GhostFS::SetxattrResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::SetxattrResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::SetxattrResults::Builder::adoptRes(
    ::capnp::Orphan< ::SetxattrResponse>&& value) {
  ::capnp::_::PointerHelpers< ::SetxattrResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SetxattrResponse> GhostFS::SetxattrResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::SetxattrResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::AccessParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::AccessParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Access::Reader GhostFS::AccessParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Access>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Access::Builder GhostFS::AccessParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Access>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Access::Pipeline GhostFS::AccessParams::Pipeline::getReq() {
  return  ::Access::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::AccessParams::Builder::setReq( ::Access::Reader value) {
  ::capnp::_::PointerHelpers< ::Access>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Access::Builder GhostFS::AccessParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Access>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::AccessParams::Builder::adoptReq(
    ::capnp::Orphan< ::Access>&& value) {
  ::capnp::_::PointerHelpers< ::Access>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Access> GhostFS::AccessParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Access>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::AccessResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::AccessResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::AccessResponse::Reader GhostFS::AccessResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::AccessResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::AccessResponse::Builder GhostFS::AccessResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::AccessResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::AccessResponse::Pipeline GhostFS::AccessResults::Pipeline::getRes() {
  return  ::AccessResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::AccessResults::Builder::setRes( ::AccessResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::AccessResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::AccessResponse::Builder GhostFS::AccessResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::AccessResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::AccessResults::Builder::adoptRes(
    ::capnp::Orphan< ::AccessResponse>&& value) {
  ::capnp::_::PointerHelpers< ::AccessResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::AccessResponse> GhostFS::AccessResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::AccessResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::CreateParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::CreateParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Create::Reader GhostFS::CreateParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Create>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Create::Builder GhostFS::CreateParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Create>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Create::Pipeline GhostFS::CreateParams::Pipeline::getReq() {
  return  ::Create::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::CreateParams::Builder::setReq( ::Create::Reader value) {
  ::capnp::_::PointerHelpers< ::Create>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Create::Builder GhostFS::CreateParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Create>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::CreateParams::Builder::adoptReq(
    ::capnp::Orphan< ::Create>&& value) {
  ::capnp::_::PointerHelpers< ::Create>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Create> GhostFS::CreateParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Create>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::CreateResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::CreateResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::CreateResponse::Reader GhostFS::CreateResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::CreateResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::CreateResponse::Builder GhostFS::CreateResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::CreateResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::CreateResponse::Pipeline GhostFS::CreateResults::Pipeline::getRes() {
  return  ::CreateResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::CreateResults::Builder::setRes( ::CreateResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::CreateResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::CreateResponse::Builder GhostFS::CreateResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::CreateResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::CreateResults::Builder::adoptRes(
    ::capnp::Orphan< ::CreateResponse>&& value) {
  ::capnp::_::PointerHelpers< ::CreateResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::CreateResponse> GhostFS::CreateResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::CreateResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::FlushParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::FlushParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Flush::Reader GhostFS::FlushParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Flush>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Flush::Builder GhostFS::FlushParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Flush>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Flush::Pipeline GhostFS::FlushParams::Pipeline::getReq() {
  return  ::Flush::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::FlushParams::Builder::setReq( ::Flush::Reader value) {
  ::capnp::_::PointerHelpers< ::Flush>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Flush::Builder GhostFS::FlushParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Flush>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::FlushParams::Builder::adoptReq(
    ::capnp::Orphan< ::Flush>&& value) {
  ::capnp::_::PointerHelpers< ::Flush>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Flush> GhostFS::FlushParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Flush>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::FlushResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::FlushResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::FlushResponse::Reader GhostFS::FlushResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::FlushResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::FlushResponse::Builder GhostFS::FlushResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::FlushResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::FlushResponse::Pipeline GhostFS::FlushResults::Pipeline::getRes() {
  return  ::FlushResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::FlushResults::Builder::setRes( ::FlushResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::FlushResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::FlushResponse::Builder GhostFS::FlushResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::FlushResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::FlushResults::Builder::adoptRes(
    ::capnp::Orphan< ::FlushResponse>&& value) {
  ::capnp::_::PointerHelpers< ::FlushResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FlushResponse> GhostFS::FlushResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::FlushResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::FsyncParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::FsyncParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Fsync::Reader GhostFS::FsyncParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Fsync>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Fsync::Builder GhostFS::FsyncParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Fsync>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Fsync::Pipeline GhostFS::FsyncParams::Pipeline::getReq() {
  return  ::Fsync::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::FsyncParams::Builder::setReq( ::Fsync::Reader value) {
  ::capnp::_::PointerHelpers< ::Fsync>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Fsync::Builder GhostFS::FsyncParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Fsync>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::FsyncParams::Builder::adoptReq(
    ::capnp::Orphan< ::Fsync>&& value) {
  ::capnp::_::PointerHelpers< ::Fsync>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Fsync> GhostFS::FsyncParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Fsync>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::FsyncResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::FsyncResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::FsyncResponse::Reader GhostFS::FsyncResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::FsyncResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::FsyncResponse::Builder GhostFS::FsyncResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::FsyncResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::FsyncResponse::Pipeline GhostFS::FsyncResults::Pipeline::getRes() {
  return  ::FsyncResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::FsyncResults::Builder::setRes( ::FsyncResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::FsyncResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::FsyncResponse::Builder GhostFS::FsyncResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::FsyncResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::FsyncResults::Builder::adoptRes(
    ::capnp::Orphan< ::FsyncResponse>&& value) {
  ::capnp::_::PointerHelpers< ::FsyncResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::FsyncResponse> GhostFS::FsyncResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::FsyncResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::BulkWriteParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::BulkWriteParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Reader GhostFS::BulkWriteParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Builder GhostFS::BulkWriteParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::BulkWriteParams::Builder::setReq( ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>::Builder GhostFS::BulkWriteParams::Builder::initReq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFS::BulkWriteParams::Builder::adoptReq(
    ::capnp::Orphan< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>> GhostFS::BulkWriteParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Write,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::BulkWriteResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::BulkWriteResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Reader GhostFS::BulkWriteResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Builder GhostFS::BulkWriteResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::BulkWriteResults::Builder::setRes( ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>::Builder GhostFS::BulkWriteResults::Builder::initRes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFS::BulkWriteResults::Builder::adoptRes(
    ::capnp::Orphan< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>> GhostFS::BulkWriteResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::WriteResponse,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER


// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ghostfs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 10002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "read.capnp.h"
#include "read.response.capnp.h"
#include "write.capnp.h"
#include "write.response.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b7e9256c41304f3c);
CAPNP_DECLARE_SCHEMA(9e07e383bd464b04);
CAPNP_DECLARE_SCHEMA(c6f18d208cd0cd46);
CAPNP_DECLARE_SCHEMA(9fc6d7895c294dc9);
CAPNP_DECLARE_SCHEMA(b0836f411d2abe3b);
CAPNP_DECLARE_SCHEMA(a8501684a32d6de9);
CAPNP_DECLARE_SCHEMA(bb20fe0f54844336);
CAPNP_DECLARE_SCHEMA(84f35b28cd3bb0d9);

}  // namespace schemas
}  // namespace capnp


struct GhostFSAuth {
  GhostFSAuth() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct AuthParams;
  struct AuthResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b7e9256c41304f3c)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct GhostFSAuth::AuthParams {
  AuthParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9e07e383bd464b04, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFSAuth::AuthResults {
  AuthResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6f18d208cd0cd46, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS {
  GhostFS() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct WriteParams;
  struct WriteResults;
  struct ReadParams;
  struct ReadResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(9fc6d7895c294dc9)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct GhostFS::WriteParams {
  WriteParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0836f411d2abe3b, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::WriteResults {
  WriteResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a8501684a32d6de9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadParams {
  ReadParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bb20fe0f54844336, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GhostFS::ReadResults {
  ReadResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84f35b28cd3bb0d9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class GhostFSAuth::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef GhostFSAuth Calls;
  typedef GhostFSAuth Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::GhostFSAuth::AuthParams,  ::GhostFSAuth::AuthResults> authRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class GhostFSAuth::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef GhostFSAuth Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::GhostFSAuth::AuthParams AuthParams;
  typedef  ::GhostFSAuth::AuthResults AuthResults;
  typedef ::capnp::CallContext<AuthParams, AuthResults> AuthContext;
  virtual ::kj::Promise<void> auth(AuthContext context);

  inline  ::GhostFSAuth::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::GhostFSAuth>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class GhostFSAuth::AuthParams::Reader {
public:
  typedef AuthParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuth::AuthParams::Builder {
public:
  typedef AuthParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuth::AuthParams::Pipeline {
public:
  typedef AuthParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFSAuth::AuthResults::Reader {
public:
  typedef AuthResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGhostFs() const;
#if !CAPNP_LITE
  inline  ::GhostFS::Client getGhostFs() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFSAuth::AuthResults::Builder {
public:
  typedef AuthResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGhostFs();
#if !CAPNP_LITE
  inline  ::GhostFS::Client getGhostFs();
  inline void setGhostFs( ::GhostFS::Client&& value);
  inline void setGhostFs( ::GhostFS::Client& value);
  inline void adoptGhostFs(::capnp::Orphan< ::GhostFS>&& value);
  inline ::capnp::Orphan< ::GhostFS> disownGhostFs();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFSAuth::AuthResults::Pipeline {
public:
  typedef AuthResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::GhostFS::Client getGhostFs();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class GhostFS::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef GhostFS Calls;
  typedef GhostFS Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::GhostFS::WriteParams,  ::GhostFS::WriteResults> writeRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::GhostFS::ReadParams,  ::GhostFS::ReadResults> readRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class GhostFS::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef GhostFS Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::GhostFS::WriteParams WriteParams;
  typedef  ::GhostFS::WriteResults WriteResults;
  typedef ::capnp::CallContext<WriteParams, WriteResults> WriteContext;
  virtual ::kj::Promise<void> write(WriteContext context);
  typedef  ::GhostFS::ReadParams ReadParams;
  typedef  ::GhostFS::ReadResults ReadResults;
  typedef ::capnp::CallContext<ReadParams, ReadResults> ReadContext;
  virtual ::kj::Promise<void> read(ReadContext context);

  inline  ::GhostFS::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::GhostFS>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class GhostFS::WriteParams::Reader {
public:
  typedef WriteParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Write::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::WriteParams::Builder {
public:
  typedef WriteParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Write::Builder getReq();
  inline void setReq( ::Write::Reader value);
  inline  ::Write::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Write>&& value);
  inline ::capnp::Orphan< ::Write> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::WriteParams::Pipeline {
public:
  typedef WriteParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Write::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::WriteResults::Reader {
public:
  typedef WriteResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::WriteResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::WriteResults::Builder {
public:
  typedef WriteResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::WriteResponse::Builder getRes();
  inline void setRes( ::WriteResponse::Reader value);
  inline  ::WriteResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::WriteResponse>&& value);
  inline ::capnp::Orphan< ::WriteResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::WriteResults::Pipeline {
public:
  typedef WriteResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::WriteResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadParams::Reader {
public:
  typedef ReadParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReq() const;
  inline  ::Read::Reader getReq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadParams::Builder {
public:
  typedef ReadParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReq();
  inline  ::Read::Builder getReq();
  inline void setReq( ::Read::Reader value);
  inline  ::Read::Builder initReq();
  inline void adoptReq(::capnp::Orphan< ::Read>&& value);
  inline ::capnp::Orphan< ::Read> disownReq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadParams::Pipeline {
public:
  typedef ReadParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Read::Pipeline getReq();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GhostFS::ReadResults::Reader {
public:
  typedef ReadResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRes() const;
  inline  ::ReadResponse::Reader getRes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GhostFS::ReadResults::Builder {
public:
  typedef ReadResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRes();
  inline  ::ReadResponse::Builder getRes();
  inline void setRes( ::ReadResponse::Reader value);
  inline  ::ReadResponse::Builder initRes();
  inline void adoptRes(::capnp::Orphan< ::ReadResponse>&& value);
  inline ::capnp::Orphan< ::ReadResponse> disownRes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GhostFS::ReadResults::Pipeline {
public:
  typedef ReadResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::ReadResponse::Pipeline getRes();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline GhostFSAuth::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline GhostFSAuth::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline GhostFSAuth::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline GhostFSAuth::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline GhostFSAuth::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::GhostFSAuth::Client& GhostFSAuth::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::GhostFSAuth::Client& GhostFSAuth::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool GhostFSAuth::AuthParams::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthParams::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuth::AuthParams::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFSAuth::AuthParams::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuth::AuthParams::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuth::AuthParams::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFSAuth::AuthParams::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthParams::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader GhostFSAuth::AuthParams::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GhostFSAuth::AuthParams::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder GhostFSAuth::AuthParams::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GhostFSAuth::AuthParams::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> GhostFSAuth::AuthParams::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GhostFSAuth::AuthResults::Reader::hasGhostFs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFSAuth::AuthResults::Builder::hasGhostFs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Reader::getGhostFs() const {
  return ::capnp::_::PointerHelpers< ::GhostFS>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Builder::getGhostFs() {
  return ::capnp::_::PointerHelpers< ::GhostFS>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::GhostFS::Client GhostFSAuth::AuthResults::Pipeline::getGhostFs() {
  return  ::GhostFS::Client(_typeless.getPointerField(0).asCap());
}
inline void GhostFSAuth::AuthResults::Builder::setGhostFs( ::GhostFS::Client&& cap) {
  ::capnp::_::PointerHelpers< ::GhostFS>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void GhostFSAuth::AuthResults::Builder::setGhostFs( ::GhostFS::Client& cap) {
  ::capnp::_::PointerHelpers< ::GhostFS>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void GhostFSAuth::AuthResults::Builder::adoptGhostFs(
    ::capnp::Orphan< ::GhostFS>&& value) {
  ::capnp::_::PointerHelpers< ::GhostFS>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::GhostFS> GhostFSAuth::AuthResults::Builder::disownGhostFs() {
  return ::capnp::_::PointerHelpers< ::GhostFS>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline GhostFS::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline GhostFS::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline GhostFS::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline GhostFS::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline GhostFS::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::GhostFS::Client& GhostFS::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::GhostFS::Client& GhostFS::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool GhostFS::WriteParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::WriteParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Write::Reader GhostFS::WriteParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Write>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Write::Builder GhostFS::WriteParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Write>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Write::Pipeline GhostFS::WriteParams::Pipeline::getReq() {
  return  ::Write::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::WriteParams::Builder::setReq( ::Write::Reader value) {
  ::capnp::_::PointerHelpers< ::Write>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Write::Builder GhostFS::WriteParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Write>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::WriteParams::Builder::adoptReq(
    ::capnp::Orphan< ::Write>&& value) {
  ::capnp::_::PointerHelpers< ::Write>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Write> GhostFS::WriteParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Write>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::WriteResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::WriteResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::WriteResponse::Reader GhostFS::WriteResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::WriteResponse::Builder GhostFS::WriteResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::WriteResponse::Pipeline GhostFS::WriteResults::Pipeline::getRes() {
  return  ::WriteResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::WriteResults::Builder::setRes( ::WriteResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::WriteResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::WriteResponse::Builder GhostFS::WriteResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::WriteResults::Builder::adoptRes(
    ::capnp::Orphan< ::WriteResponse>&& value) {
  ::capnp::_::PointerHelpers< ::WriteResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::WriteResponse> GhostFS::WriteResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::WriteResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadParams::Reader::hasReq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadParams::Builder::hasReq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Read::Reader GhostFS::ReadParams::Reader::getReq() const {
  return ::capnp::_::PointerHelpers< ::Read>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Read::Builder GhostFS::ReadParams::Builder::getReq() {
  return ::capnp::_::PointerHelpers< ::Read>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Read::Pipeline GhostFS::ReadParams::Pipeline::getReq() {
  return  ::Read::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadParams::Builder::setReq( ::Read::Reader value) {
  ::capnp::_::PointerHelpers< ::Read>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Read::Builder GhostFS::ReadParams::Builder::initReq() {
  return ::capnp::_::PointerHelpers< ::Read>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadParams::Builder::adoptReq(
    ::capnp::Orphan< ::Read>&& value) {
  ::capnp::_::PointerHelpers< ::Read>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Read> GhostFS::ReadParams::Builder::disownReq() {
  return ::capnp::_::PointerHelpers< ::Read>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GhostFS::ReadResults::Reader::hasRes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GhostFS::ReadResults::Builder::hasRes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::ReadResponse::Reader GhostFS::ReadResults::Reader::getRes() const {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::ReadResponse::Builder GhostFS::ReadResults::Builder::getRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ReadResponse::Pipeline GhostFS::ReadResults::Pipeline::getRes() {
  return  ::ReadResponse::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void GhostFS::ReadResults::Builder::setRes( ::ReadResponse::Reader value) {
  ::capnp::_::PointerHelpers< ::ReadResponse>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::ReadResponse::Builder GhostFS::ReadResults::Builder::initRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GhostFS::ReadResults::Builder::adoptRes(
    ::capnp::Orphan< ::ReadResponse>&& value) {
  ::capnp::_::PointerHelpers< ::ReadResponse>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ReadResponse> GhostFS::ReadResults::Builder::disownRes() {
  return ::capnp::_::PointerHelpers< ::ReadResponse>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

